35934 warnings and 1 error generated.
Error while processing G:\finalcolorwithcalibration\src\main.cpp.
src/main.cpp:14:10: error: 'ESPAsyncWebServer.h' file not found [clang-diagnostic-error]
   14 | #include <ESPAsyncWebServer.h>
      |          ^~~~~~~~~~~~~~~~~~~~~
src/main.cpp:81:13: warning: variable 'ums3' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
   81 | static UMS3 ums3;
      |             ^
src/main.cpp:84:7: warning: class 'PsramAllocator' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [hicpp-special-member-functions]
   84 | class PsramAllocator : public ArduinoJson::Allocator {
      |       ^
src/main.cpp:92:8: warning: method 'deallocate' can be made static [readability-convert-member-functions-to-static]
   92 |   void deallocate(void *pointer) override {
      |        ^
      |   static 
src/main.cpp:92:3: note: FIX-IT applied suggested code changes
   92 |   void deallocate(void *pointer) override {
      |   ^
src/main.cpp:102:6: warning: enum 'LogLevel' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  102 | enum LogLevel { LOG_ERROR = 0, LOG_WARN = 1, LOG_INFO = 2, LOG_DEBUG = 3 };
      |      ^
src/main.cpp:163:20: warning: variable 'ssid' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  163 | static const char *ssid = WIFI_SSID;
      |                    ^
src/main.cpp:164:20: warning: variable 'password' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  164 | static const char *password = WIFI_PASSWORD;
      |                    ^
src/main.cpp:167:20: warning: variable 'apSsid' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  167 | static const char *apSsid = AP_SSID;
      |                    ^
src/main.cpp:168:20: warning: variable 'apPassword' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  168 | static const char *apPassword = AP_PASSWORD;
      |                    ^
src/main.cpp:171:18: warning: variable 'localIp' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  171 | static IPAddress localIp, gateway, subnet;
      |                  ^
src/main.cpp:172:13: warning: function 'initializeIPAddresses' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  172 | static void initializeIPAddresses() {
      |             ^
src/main.cpp:179:23: warning: variable 'server' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  179 | static AsyncWebServer server(HTTP_SERVER_PORT);
      |                       ^
src/main.cpp:182:13: warning: function 'handleGetSettings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  182 | static void handleGetSettings(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:183:13: warning: function 'handleSetLedBrightness' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  183 | static void handleSetLedBrightness(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:184:13: warning: function 'handleSetIntegrationTime' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  184 | static void handleSetIntegrationTime(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:185:13: warning: function 'handleSetIRCompensation' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  185 | static void handleSetIRCompensation(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:186:13: warning: function 'handleSetColorSamples' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  186 | static void handleSetColorSamples(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:187:13: warning: function 'handleSetSampleDelay' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  187 | static void handleSetSampleDelay(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:188:13: warning: function 'handleSetDebugSettings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  188 | static void handleSetDebugSettings(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:189:13: warning: function 'handleAdvancedSensorSettings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  189 | static void handleAdvancedSensorSettings(AsyncWebServerRequest *request);  // Advanced TCS3430 API
      |             ^
src/main.cpp:190:13: warning: function 'handleSaveSettings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  190 | static void handleSaveSettings(AsyncWebServerRequest *request);  // Save settings to preferences
      |             ^
src/main.cpp:191:13: warning: function 'handleFixWhiteCalibration' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  191 | static void handleFixWhiteCalibration();                         // Fix white calibration
      |             ^
src/main.cpp:192:13: warning: function 'handleUseDFRobotCalibration' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  192 | static void handleUseDFRobotCalibration(
      |             ^
src/main.cpp:194:13: warning: function 'handleDebugVividColors' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  194 | static void handleDebugVividColors(AsyncWebServerRequest *request);  // Debug vivid color issues
      |             ^
src/main.cpp:195:13: warning: function 'handleFixBlueChannel' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  195 | static void handleFixBlueChannel(AsyncWebServerRequest *request);  // Fix blue channel specifically
      |             ^
src/main.cpp:196:13: warning: function 'handleFixVividColors' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  196 | static void handleFixVividColors(AsyncWebServerRequest *request);  // Fix vivid color detection
      |             ^
src/main.cpp:197:13: warning: function 'optimizeSensorForCurrentLight' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  197 | static void optimizeSensorForCurrentLight();                       // Auto-optimize sensor settings
      |             ^
src/main.cpp:198:13: warning: function 'handleAutoOptimizeSensor' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  198 | static void handleAutoOptimizeSensor(AsyncWebServerRequest *request);  // Manual sensor optimization
      |             ^
src/main.cpp:199:13: warning: function 'handleSensorStatus' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  199 | static void handleSensorStatus(AsyncWebServerRequest *request);        // Get detailed sensor status
      |             ^
src/main.cpp:200:13: warning: function 'handleFixBlackReadings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  200 | static void handleFixBlackReadings(AsyncWebServerRequest *request);    // Fix black/low readings
      |             ^
src/main.cpp:203:13: warning: function 'handleFastColorAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  203 | static void handleFastColorAPI(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:204:13: warning: function 'handleColorNameAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  204 | static void handleColorNameAPI(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:205:13: warning: function 'handleForceColorLookup' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  205 | static void handleForceColorLookup(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:208:13: warning: function 'handleCalibrateBlackReference' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  208 | static void handleCalibrateBlackReference(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:209:13: warning: function 'handleCalibrateWhiteReference' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  209 | static void handleCalibrateWhiteReference(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:210:13: warning: function 'handleCalibrateVividWhite' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  210 | static void handleCalibrateVividWhite(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:211:13: warning: function 'handleGetCalibrationData' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  211 | static void handleGetCalibrationData(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:212:13: warning: function 'handleResetCalibration' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  212 | static void handleResetCalibration(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:213:13: warning: function 'handleDiagnoseCalibration' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  213 | static void handleDiagnoseCalibration(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:214:13: warning: function 'handleOptimizeAccuracy' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  214 | static void handleOptimizeAccuracy(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:215:13: warning: function 'handleTestAllImprovements' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  215 | static void handleTestAllImprovements(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:217:13: warning: function 'convertXyZtoRgbVividWhite' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  217 | static void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |             ^
src/main.cpp:217:48: warning: parameter name 'X' is too short, expected at least 3 characters [readability-identifier-length]
  217 | static void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                ^
src/main.cpp:217:60: warning: parameter name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
  217 | static void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                            ^
src/main.cpp:217:72: warning: parameter name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
  217 | static void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                                        ^
src/main.cpp:218:62: warning: parameter name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  218 |                                       uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                              ^
src/main.cpp:218:74: warning: parameter name 'G' is too short, expected at least 3 characters [readability-identifier-length]
  218 |                                       uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                                          ^
src/main.cpp:218:86: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
  218 |                                       uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                                                      ^
src/main.cpp:219:13: warning: function 'convertXyZtoRgbPlaceholder' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  219 | static void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |             ^
src/main.cpp:219:49: warning: parameter name 'X' is too short, expected at least 3 characters [readability-identifier-length]
  219 | static void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                 ^
src/main.cpp:219:61: warning: parameter name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
  219 | static void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                             ^
src/main.cpp:219:73: warning: parameter name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
  219 | static void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1,
      |                                                                         ^
src/main.cpp:220:63: warning: parameter name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  220 |                                        uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                               ^
src/main.cpp:220:75: warning: parameter name 'G' is too short, expected at least 3 characters [readability-identifier-length]
  220 |                                        uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                                           ^
src/main.cpp:220:87: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
  220 |                                        uint16_t IR2, uint8_t &R, uint8_t &G, uint8_t &B);
      |                                                                                       ^
src/main.cpp:223:14: warning: function 'getBatteryVoltage' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  223 | static float getBatteryVoltage();
      |              ^
src/main.cpp:225:13: warning: function 'getVbusPresent' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  225 | static bool getVbusPresent();
      |             ^
src/main.cpp:226:13: warning: function 'handleBatteryAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  226 | static void handleBatteryAPI(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:227:13: warning: function 'handleIRCompensationAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  227 | static void handleIRCompensationAPI(AsyncWebServerRequest *request);
      |             ^
src/main.cpp:229:24: warning: variable 'colorSensor' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  229 | static TCS3430AutoGain colorSensor;  // Using new auto-gain library with corrected register mapping
      |                        ^
src/main.cpp:242:12: warning: variable 'leDpin' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  242 | static int leDpin = LED_PIN;
      |            ^
src/main.cpp:296:3: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  296 |   float brightMatrix[9] = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
      |   ^
src/main.cpp:297:3: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  297 |   float darkMatrix[9] = {1.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f};
      |   ^
src/main.cpp:336:24: warning: variable 'settings' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  336 | static RuntimeSettings settings;
      |                        ^
src/main.cpp:342:26: warning: variable 'simpleColorDB' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  342 | static DuluxSimpleReader simpleColorDB;
      |                          ^
src/main.cpp:344:26: warning: variable 'kdTreeColorDB' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  344 | static LightweightKDTree kdTreeColorDB;
      |                          ^
src/main.cpp:357:20: warning: variable 'fallbackColorDatabase' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  357 | static DuluxColor *fallbackColorDatabase = nullptr;
      |                    ^
src/main.cpp:358:12: warning: variable 'fallbackColorCount' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  358 | static int fallbackColorCount = 0;
      |            ^
src/main.cpp:361:7: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  361 | const DuluxColor FALLBACK_COLORS[] PROGMEM = {
      |       ^
src/main.cpp:374:13: warning: function 'loadFallbackColors' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  374 | static bool loadFallbackColors() {
      |             ^
src/main.cpp:375:13: warning: variable 'FALLBACK_COUNT' is not initialized [cppcoreguidelines-init-variables]
  375 |   const int FALLBACK_COUNT = sizeof(FALLBACK_COLORS) / sizeof(FALLBACK_COLORS[0]) = 0 = 0;
      |             ^                                                                            
      |                                                                                           = 0
src/main.cpp:375:90: note: FIX-IT applied suggested code changes
  375 |   const int FALLBACK_COUNT = sizeof(FALLBACK_COLORS) / sizeof(FALLBACK_COLORS[0]) = 0 = 0;
      |                                                                                          ^
src/main.cpp:383:5: warning: assigning newly created 'gsl::owner<>' to non-owner 'DuluxColor *' [cppcoreguidelines-owning-memory]
  383 |     fallbackColorDatabase = new DuluxColor[FALLBACK_COUNT];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main.cpp:392:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  392 |     fallbackColorDatabase[i].name = String(FALLBACK_COLORS[i].name);
      |     ^
src/main.cpp:393:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  393 |     fallbackColorDatabase[i].code = String(FALLBACK_COLORS[i].code);
      |     ^
src/main.cpp:394:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  394 |     fallbackColorDatabase[i].r = FALLBACK_COLORS[i].r;
      |     ^
src/main.cpp:395:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  395 |     fallbackColorDatabase[i].g = FALLBACK_COLORS[i].g;
      |     ^
src/main.cpp:396:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  396 |     fallbackColorDatabase[i].b = FALLBACK_COLORS[i].b;
      |     ^
src/main.cpp:397:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  397 |     fallbackColorDatabase[i].lrv = String(FALLBACK_COLORS[i].lrv);
      |     ^
src/main.cpp:398:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  398 |     fallbackColorDatabase[i].id = String(FALLBACK_COLORS[i].id);
      |     ^
src/main.cpp:409:13: warning: function 'loadColorDatabase' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  409 | static bool loadColorDatabase() {
      |             ^
src/main.cpp:415:16: warning: variable 'FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  415 |   size_t const FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                ^                                                 
      |                                                                   = 0
src/main.cpp:415:66: note: FIX-IT applied suggested code changes
  415 |   size_t const FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                                                                  ^
src/main.cpp:422:23: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  422 |     if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                       ^
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:422:23: note: make conversion explicit to silence this warning
  422 |     if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                       ^                                    
      |                       static_cast<size_t>(                 )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:422:23: note: perform multiplication in a wider type
  422 |     if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                       ^
      |                       static_cast<long long>( )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^~~~
src/main.cpp:472:20: warning: variable 'HEAP_BEFORE_KD' is not initialized [cppcoreguidelines-init-variables]
  472 |       size_t const HEAP_BEFORE_KD = ESP.getFreeHeap();
      |                    ^                                 
      |                                                       = 0
src/main.cpp:472:54: note: FIX-IT applied suggested code changes
  472 |       size_t const HEAP_BEFORE_KD = ESP.getFreeHeap();
      |                                                      ^
src/main.cpp:473:20: warning: variable 'PSRAM_BEFORE_KD' is not initialized [cppcoreguidelines-init-variables]
  473 |       size_t const PSRAM_BEFORE_KD = ESP.getFreePsram();
      |                    ^                                   
      |                                                         = 0
src/main.cpp:473:56: note: FIX-IT applied suggested code changes
  473 |       size_t const PSRAM_BEFORE_KD = ESP.getFreePsram();
      |                                                        ^
src/main.cpp:523:26: warning: variable 'CURRENT_FREE_HEAP' is not initialized [cppcoreguidelines-init-variables]
  523 |             size_t const CURRENT_FREE_HEAP = ESP.getFreeHeap();
      |                          ^                                    
      |                                                                = 0
src/main.cpp:523:63: note: FIX-IT applied suggested code changes
  523 |             size_t const CURRENT_FREE_HEAP = ESP.getFreeHeap();
      |                                                               ^
src/main.cpp:524:26: warning: variable 'CURRENT_FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  524 |             size_t const CURRENT_FREE_PSRAM = ESP.getFreePsram();
      |                          ^                                      
      |                                                                  = 0
src/main.cpp:524:65: note: FIX-IT applied suggested code changes
  524 |             size_t const CURRENT_FREE_PSRAM = ESP.getFreePsram();
      |                                                                 ^
src/main.cpp:628:19: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  628 |   if (FILE_SIZE > 10 * 1024 * BYTES_PER_KB) {  // 10MB limit
      |                   ^
src/main.cpp:628:19: note: make conversion explicit to silence this warning
  628 |   if (FILE_SIZE > 10 * 1024 * BYTES_PER_KB) {  // 10MB limit
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~
      |                   static_cast<size_t>(    )
src/main.cpp:628:19: note: perform multiplication in a wider type
  628 |   if (FILE_SIZE > 10 * 1024 * BYTES_PER_KB) {  // 10MB limit
      |                   ^~~~~~~~~
      |                   static_cast<long long>( )
src/main.cpp:643:14: warning: function 'calculateColorDistance' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |              ^
src/main.cpp:643:45: warning: parameter name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |                                             ^
src/main.cpp:643:57: warning: parameter name 'g1' is too short, expected at least 3 characters [readability-identifier-length]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |                                                         ^
src/main.cpp:643:69: warning: parameter name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |                                                                     ^
src/main.cpp:643:81: warning: parameter name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |                                                                                 ^
src/main.cpp:643:93: warning: parameter name 'g2' is too short, expected at least 3 characters [readability-identifier-length]
  643 | static float calculateColorDistance(uint8_t r1, uint8_t g1, uint8_t b1, uint8_t r2, uint8_t g2,
      |                                                                                             ^
src/main.cpp:644:45: warning: parameter name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  644 |                                     uint8_t b2) {
      |                                             ^
src/main.cpp:657:15: warning: function 'findClosestDuluxColor' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  657 | static String findClosestDuluxColor(uint8_t r, uint8_t g, uint8_t b) {
      |               ^
src/main.cpp:657:45: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  657 | static String findClosestDuluxColor(uint8_t r, uint8_t g, uint8_t b) {
      |                                             ^
src/main.cpp:657:56: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  657 | static String findClosestDuluxColor(uint8_t r, uint8_t g, uint8_t b) {
      |                                                        ^
src/main.cpp:657:67: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  657 | static String findClosestDuluxColor(uint8_t r, uint8_t g, uint8_t b) {
      |                                                                   ^
src/main.cpp:719:43: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  719 |           calculateColorDistance(r, g, b, fallbackColorDatabase[i].r, fallbackColorDatabase[i].g,
      |                                           ^
src/main.cpp:719:71: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  719 |           calculateColorDistance(r, g, b, fallbackColorDatabase[i].r, fallbackColorDatabase[i].g,
      |                                                                       ^
src/main.cpp:720:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  720 |                                  fallbackColorDatabase[i].b);
      |                                  ^
src/main.cpp:725:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  725 |         bestMatch = fallbackColorDatabase[i].name + " (" + fallbackColorDatabase[i].code + ")";
      |                     ^
src/main.cpp:725:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  725 |         bestMatch = fallbackColorDatabase[i].name + " (" + fallbackColorDatabase[i].code + ")";
      |                                                            ^
src/main.cpp:773:13: warning: function 'analyzeSystemPerformance' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  773 | static void analyzeSystemPerformance() {
      |             ^
src/main.cpp:777:16: warning: variable 'TOTAL_HEAP' is not initialized [cppcoreguidelines-init-variables]
  777 |   size_t const TOTAL_HEAP = ESP.getHeapSize();
      |                ^                             
      |                                               = 0
src/main.cpp:777:46: note: FIX-IT applied suggested code changes
  777 |   size_t const TOTAL_HEAP = ESP.getHeapSize();
      |                                              ^
src/main.cpp:778:16: warning: variable 'FREE_HEAP' is not initialized [cppcoreguidelines-init-variables]
  778 |   size_t const FREE_HEAP = ESP.getFreeHeap();
      |                ^                            
      |                                              = 0
src/main.cpp:778:45: note: FIX-IT applied suggested code changes
  778 |   size_t const FREE_HEAP = ESP.getFreeHeap();
      |                                             ^
src/main.cpp:779:16: warning: variable 'TOTAL_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  779 |   size_t const TOTAL_PSRAM = psramFound() ? ESP.getPsramSize() : 0;
      |                ^                                                  
      |                                                                    = 0
src/main.cpp:779:67: note: FIX-IT applied suggested code changes
  779 |   size_t const TOTAL_PSRAM = psramFound() ? ESP.getPsramSize() : 0;
      |                                                                   ^
src/main.cpp:780:16: warning: variable 'FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  780 |   size_t const FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                ^                                                 
      |                                                                   = 0
src/main.cpp:780:66: note: FIX-IT applied suggested code changes
  780 |   size_t const FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                                                                  ^
src/main.cpp:834:21: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  834 |   if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                     ^
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:834:21: note: make conversion explicit to silence this warning
  834 |   if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                     ^                                    
      |                     static_cast<size_t>(                 )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:834:21: note: perform multiplication in a wider type
  834 |   if (FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB)) {
      |                     ^
      |                     static_cast<long long>( )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^~~~
src/main.cpp:850:13: warning: function 'cleanupColorDatabase' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  850 | static void cleanupColorDatabase() {
      |             ^
src/main.cpp:881:3: warning: variable 'currentColorData' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  881 | } currentColorData;
      |   ^
src/main.cpp:891:3: warning: variable 'colorLookup' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  891 | } colorLookup;
      |   ^
src/main.cpp:894:13: warning: function 'handleRoot' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  894 | static void handleRoot(AsyncWebServerRequest *request) {
      |             ^
src/main.cpp:909:13: warning: function 'handleCSS' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  909 | static void handleCSS(AsyncWebServerRequest *request) {
      |             ^
src/main.cpp:924:13: warning: function 'handleJS' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  924 | static void handleJS(AsyncWebServerRequest *request) {
      |             ^
src/main.cpp:939:13: warning: function 'handleColorAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
  939 | static void handleColorAPI(AsyncWebServerRequest *request) {
      |             ^
src/main.cpp:939:51: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
  939 | static void handleColorAPI(AsyncWebServerRequest *request) {
      |                                                   ^
      |                            const 
src/main.cpp:939:28: note: FIX-IT applied suggested code changes
  939 | static void handleColorAPI(AsyncWebServerRequest *request) {
      |                            ^
src/main.cpp:968:6: warning: function 'handleFastColorAPI' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
  968 | void handleFastColorAPI(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:968:1: note: FIX-IT applied suggested code changes
  968 | void handleFastColorAPI(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:968:48: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
  968 | void handleFastColorAPI(AsyncWebServerRequest *request) {
      |                                                ^
      |                         const 
src/main.cpp:968:25: note: FIX-IT applied suggested code changes
  968 | void handleFastColorAPI(AsyncWebServerRequest *request) {
      |                         ^
src/main.cpp:995:6: warning: function 'handleColorNameAPI' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
  995 | void handleColorNameAPI(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:995:1: note: FIX-IT applied suggested code changes
  995 | void handleColorNameAPI(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:995:48: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
  995 | void handleColorNameAPI(AsyncWebServerRequest *request) {
      |                                                ^
      |                         const 
src/main.cpp:995:25: note: FIX-IT applied suggested code changes
  995 | void handleColorNameAPI(AsyncWebServerRequest *request) {
      |                         ^
src/main.cpp:1023:6: warning: function 'handleForceColorLookup' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1023 | void handleForceColorLookup(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1023:1: note: FIX-IT applied suggested code changes
 1023 | void handleForceColorLookup(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1023:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1023 | void handleForceColorLookup(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:1023:29: note: FIX-IT applied suggested code changes
 1023 | void handleForceColorLookup(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:1084:6: warning: function 'handleGetSettings' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1084 | void handleGetSettings(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1084:1: note: FIX-IT applied suggested code changes
 1084 | void handleGetSettings(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1084:47: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1084 | void handleGetSettings(AsyncWebServerRequest *request) {
      |                                               ^
      |                        const 
src/main.cpp:1084:24: note: FIX-IT applied suggested code changes
 1084 | void handleGetSettings(AsyncWebServerRequest *request) {
      |                        ^
src/main.cpp:1153:6: warning: function 'handleSetLedBrightness' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1153 | void handleSetLedBrightness(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1153:1: note: FIX-IT applied suggested code changes
 1153 | void handleSetLedBrightness(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1153:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1153 | void handleSetLedBrightness(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:1153:29: note: FIX-IT applied suggested code changes
 1153 | void handleSetLedBrightness(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:1172:6: warning: function 'handleSetIntegrationTime' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1172 | void handleSetIntegrationTime(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1172:1: note: FIX-IT applied suggested code changes
 1172 | void handleSetIntegrationTime(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1172:54: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1172 | void handleSetIntegrationTime(AsyncWebServerRequest *request) {
      |                                                      ^
      |                               const 
src/main.cpp:1172:31: note: FIX-IT applied suggested code changes
 1172 | void handleSetIntegrationTime(AsyncWebServerRequest *request) {
      |                               ^
src/main.cpp:1191:6: warning: function 'handleSetIRCompensation' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1191 | void handleSetIRCompensation(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1191:1: note: FIX-IT applied suggested code changes
 1191 | void handleSetIRCompensation(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1191:53: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1191 | void handleSetIRCompensation(AsyncWebServerRequest *request) {
      |                                                     ^
      |                              const 
src/main.cpp:1191:30: note: FIX-IT applied suggested code changes
 1191 | void handleSetIRCompensation(AsyncWebServerRequest *request) {
      |                              ^
src/main.cpp:1214:41: warning: parameter name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 1214 | void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                         ^
src/main.cpp:1214:53: warning: parameter name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 1214 | void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                                     ^
src/main.cpp:1214:65: warning: parameter name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 1214 | void convertXyZtoRgbVividWhite(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                                                 ^
src/main.cpp:1215:41: warning: parameter name 'R' is too short, expected at least 3 characters [readability-identifier-length]
 1215 |                                uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                         ^
src/main.cpp:1215:53: warning: parameter name 'G' is too short, expected at least 3 characters [readability-identifier-length]
 1215 |                                uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                                     ^
src/main.cpp:1215:65: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
 1215 |                                uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                                                 ^
src/main.cpp:1230:21: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1230 |   float adjustedX = X - (IR1 * 0.05f);  // Minimal IR compensation
      |                     ^
src/main.cpp:1230:26: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1230 |   float adjustedX = X - (IR1 * 0.05f);  // Minimal IR compensation
      |                          ^
src/main.cpp:1231:21: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1231 |   float adjustedY = Y - (IR2 * 0.05f);
      |                     ^
src/main.cpp:1231:26: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1231 |   float adjustedY = Y - (IR2 * 0.05f);
      |                          ^
src/main.cpp:1232:21: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1232 |   float adjustedZ = Z - ((IR1 + IR2) * 0.025f);
      |                     ^
src/main.cpp:1232:26: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1232 |   float adjustedZ = Z - ((IR1 + IR2) * 0.025f);
      |                          ^
src/main.cpp:1276:42: warning: parameter name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 1276 | void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                          ^
src/main.cpp:1276:54: warning: parameter name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 1276 | void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                                      ^
src/main.cpp:1276:66: warning: parameter name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 1276 | void convertXyZtoRgbPlaceholder(uint16_t X, uint16_t Y, uint16_t Z, uint16_t IR1, uint16_t IR2,
      |                                                                  ^
src/main.cpp:1277:42: warning: parameter name 'R' is too short, expected at least 3 characters [readability-identifier-length]
 1277 |                                 uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                          ^
src/main.cpp:1277:54: warning: parameter name 'G' is too short, expected at least 3 characters [readability-identifier-length]
 1277 |                                 uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                                      ^
src/main.cpp:1277:66: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
 1277 |                                 uint8_t &R, uint8_t &G, uint8_t &B) {
      |                                                                  ^
src/main.cpp:1295:14: warning: variable 'VBUS_PRESENT' is not initialized [cppcoreguidelines-init-variables]
 1295 |   bool const VBUS_PRESENT = UMS3::getVbusPresent();
      |              ^                                    
      |                                                    = false
src/main.cpp:1295:51: note: FIX-IT applied suggested code changes
 1295 |   bool const VBUS_PRESENT = UMS3::getVbusPresent();
      |                                                   ^
src/main.cpp:1301:6: warning: function 'handleBatteryAPI' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1301 | void handleBatteryAPI(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:1301:1: note: FIX-IT applied suggested code changes
 1301 | void handleBatteryAPI(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:1301:46: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1301 | void handleBatteryAPI(AsyncWebServerRequest *request) {
      |                                              ^
      |                       const 
src/main.cpp:1301:23: note: FIX-IT applied suggested code changes
 1301 | void handleBatteryAPI(AsyncWebServerRequest *request) {
      |                       ^
src/main.cpp:1353:13: warning: function 'handleIRCompensationAPI' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
 1353 | static void handleIRCompensationAPI(AsyncWebServerRequest *request) {
      |             ^
src/main.cpp:1353:60: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 1353 | static void handleIRCompensationAPI(AsyncWebServerRequest *request) {
      |                                                            ^
      |                                     const 
src/main.cpp:1353:37: note: FIX-IT applied suggested code changes
 1353 | static void handleIRCompensationAPI(AsyncWebServerRequest *request) {
      |                                     ^
src/main.cpp:1412:13: warning: function 'connectToWiFiOrStartAP' declared 'static', move to anonymous namespace instead [misc-use-anonymous-namespace]
 1412 | static bool connectToWiFiOrStartAP() {
      |             ^
src/main.cpp:1416:13: warning: variable 'NUM_NETWORKS' is not initialized [cppcoreguidelines-init-variables]
 1416 |   int const NUM_NETWORKS = WiFi.scanNetworks();
      |             ^                                 
      |                                                = 0
src/main.cpp:1416:47: note: FIX-IT applied suggested code changes
 1416 |   int const NUM_NETWORKS = WiFi.scanNetworks();
      |                                               ^
src/main.cpp:1440:21: warning: invalid case style for variable 'WIFI_AP' [readability-identifier-naming]
 1440 |     WiFiClass::mode(WIFI_AP);
      |                     ^~~~~~~
      |                     wifiAp
src/main.cpp:1440:21: note: FIX-IT applied suggested code changes
src/main.cpp:1441:16: warning: variable 'AP_STARTED' is not initialized [cppcoreguidelines-init-variables]
 1441 |     bool const AP_STARTED = WiFi.softAP(apSsid, apPassword);
      |                ^                              
      |                                                = false
src/main.cpp:1441:47: note: FIX-IT applied suggested code changes
 1441 |     bool const AP_STARTED = WiFi.softAP(apSsid, apPassword);
      |                                               ^
src/main.cpp:1461:19: warning: invalid case style for variable 'WIFI_STA' [readability-identifier-naming]
 1461 |   WiFiClass::mode(WIFI_STA);
      |                   ^~~~~~~~
      |                   wifiSta
src/main.cpp:1461:19: note: FIX-IT applied suggested code changes
src/main.cpp:1490:19: warning: invalid case style for variable 'WIFI_AP' [readability-identifier-naming]
 1490 |   WiFiClass::mode(WIFI_AP);
      |                   ^~~~~~~
      |                   wifiAp
src/main.cpp:1490:19: note: FIX-IT applied suggested code changes
src/main.cpp:1491:14: warning: variable 'AP_STARTED' is not initialized [cppcoreguidelines-init-variables]
 1491 |   bool const AP_STARTED = WiFi.softAP(apSsid, apPassword);
      |              ^                              
      |                                              = false
src/main.cpp:1491:45: note: FIX-IT applied suggested code changes
 1491 |   bool const AP_STARTED = WiFi.softAP(apSsid, apPassword);
      |                                             ^
src/main.cpp:1507:6: warning: function 'setup' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1507 | void setup() {
      |      ^
      | static 
src/main.cpp:1507:1: note: FIX-IT applied suggested code changes
 1507 | void setup() {
      | ^
src/main.cpp:1516:18: warning: variable 'PSRAM_SIZE' is not initialized [cppcoreguidelines-init-variables]
 1516 |     size_t const PSRAM_SIZE = ESP.getPsramSize();
      |                  ^                              
      |                                                  = 0
src/main.cpp:1516:49: note: FIX-IT applied suggested code changes
 1516 |     size_t const PSRAM_SIZE = ESP.getPsramSize();
      |                                                 ^
src/main.cpp:1517:18: warning: variable 'FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
 1517 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                  ^                              
      |                                                  = 0
src/main.cpp:1517:49: note: FIX-IT applied suggested code changes
 1517 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                                                 ^
src/main.cpp:1525:22: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
 1525 |     if (FREE_PSRAM < 2 * 1024 * BYTES_PER_KB) {  // Less than 2MB free
      |                      ^
src/main.cpp:1525:22: note: make conversion explicit to silence this warning
 1525 |     if (FREE_PSRAM < 2 * 1024 * BYTES_PER_KB) {  // Less than 2MB free
      |                      ^~~~~~~~~~~~~~~~~~~~~~~
      |                      static_cast<size_t>(   )
src/main.cpp:1525:22: note: perform multiplication in a wider type
 1525 |     if (FREE_PSRAM < 2 * 1024 * BYTES_PER_KB) {  // Less than 2MB free
      |                      ^~~~~~~~
      |                      static_cast<long long>( )
src/main.cpp:1624:16: warning: variable 'TOTAL' is not initialized [cppcoreguidelines-init-variables]
 1624 |   size_t const TOTAL = LittleFS.totalBytes();
      |                ^                            
      |                                              = 0
src/main.cpp:1624:45: note: FIX-IT applied suggested code changes
 1624 |   size_t const TOTAL = LittleFS.totalBytes();
      |                                             ^
src/main.cpp:1625:16: warning: variable 'USED' is not initialized [cppcoreguidelines-init-variables]
 1625 |   size_t const USED = LittleFS.usedBytes();
      |                ^                          
      |                                            = 0
src/main.cpp:1625:43: note: FIX-IT applied suggested code changes
 1625 |   size_t const USED = LittleFS.usedBytes();
      |                                           ^
src/main.cpp:1803:6: warning: function 'loop' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 1803 | void loop() {
      |      ^
      | static 
src/main.cpp:1803:1: note: FIX-IT applied suggested code changes
 1803 | void loop() {
      | ^
src/main.cpp:1849:12: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
 1849 |     static float satHistory[5] = {0.5f, 0.5f, 0.5f, 0.5f, 0.5f};  // Initialize to mid-range
      |            ^
src/main.cpp:1855:49: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1855 |     float const SAT_LEVEL = (float)maxChannel / settings.sensorSaturationThreshold;
      |                                                 ^
src/main.cpp:1858:5: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
 1858 |     satHistory[satIndex] = SAT_LEVEL;
      |     ^
src/main.cpp:1863:22: warning: variable name 'I' is too short, expected at least 3 characters [readability-identifier-length]
 1863 |     for (float const I : satHistory) {
      |                      ^
src/main.cpp:1902:11: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 1902 |   uint8_t r = 0;
      |           ^
src/main.cpp:1903:11: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
 1903 |   uint8_t g = 0;
      |           ^
src/main.cpp:1904:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 1904 |   uint8_t b = 0;
      |           ^
src/main.cpp:1930:9: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1930 |     if (TOTAL_IR > maxChannel * 0.3f) {
      |         ^
src/main.cpp:1930:20: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1930 |     if (TOTAL_IR > maxChannel * 0.3f) {
      |                    ^
src/main.cpp:1944:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1944 |   smoothedR = smoothedR * SMOOTHING_FACTOR + r * (1.0f - SMOOTHING_FACTOR);
      |                                              ^
src/main.cpp:1945:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1945 |   smoothedG = smoothedG * SMOOTHING_FACTOR + g * (1.0f - SMOOTHING_FACTOR);
      |                                              ^
src/main.cpp:1946:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 1946 |   smoothedB = smoothedB * SMOOTHING_FACTOR + b * (1.0f - SMOOTHING_FACTOR);
      |                                              ^
src/main.cpp:2030:18: warning: variable 'CURRENT_FREE_HEAP' is not initialized [cppcoreguidelines-init-variables]
 2030 |     size_t const CURRENT_FREE_HEAP = ESP.getFreeHeap();
      |                  ^                                    
      |                                                        = 0
src/main.cpp:2030:55: note: FIX-IT applied suggested code changes
 2030 |     size_t const CURRENT_FREE_HEAP = ESP.getFreeHeap();
      |                                                       ^
src/main.cpp:2031:18: warning: variable 'CURRENT_FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
 2031 |     size_t const CURRENT_FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                  ^                                                         
      |                                                                             = 0
src/main.cpp:2031:76: note: FIX-IT applied suggested code changes
 2031 |     size_t const CURRENT_FREE_PSRAM = psramFound() ? ESP.getFreePsram() : 0;
      |                                                                            ^
src/main.cpp:2053:31: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
 2053 |     if (CURRENT_FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB) && settings.enableKdtree) {
      |                               ^
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:2053:31: note: make conversion explicit to silence this warning
 2053 |     if (CURRENT_FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB) && settings.enableKdtree) {
      |                               ^                                    
      |                               static_cast<size_t>(                 )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^
src/main.cpp:2053:31: note: perform multiplication in a wider type
 2053 |     if (CURRENT_FREE_PSRAM < (PSRAM_SAFETY_MARGIN_KB * BYTES_PER_KB) && settings.enableKdtree) {
      |                               ^
      |                               static_cast<long long>( )
src\sensor_settings.h:116:32: note: expanded from macro 'PSRAM_SAFETY_MARGIN_KB'
  116 | #define PSRAM_SAFETY_MARGIN_KB 2048   // ≡ƒÆ╛ PSRAM to keep free in KB (default: 2048)
      |                                ^~~~
src/main.cpp:2065:6: warning: function 'handleSetColorSamples' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2065 | void handleSetColorSamples(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2065:1: note: FIX-IT applied suggested code changes
 2065 | void handleSetColorSamples(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2065:51: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2065 | void handleSetColorSamples(AsyncWebServerRequest *request) {
      |                                                   ^
      |                            const 
src/main.cpp:2065:28: note: FIX-IT applied suggested code changes
 2065 | void handleSetColorSamples(AsyncWebServerRequest *request) {
      |                            ^
src/main.cpp:2083:6: warning: function 'handleSetSampleDelay' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2083 | void handleSetSampleDelay(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2083:1: note: FIX-IT applied suggested code changes
 2083 | void handleSetSampleDelay(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2083:50: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2083 | void handleSetSampleDelay(AsyncWebServerRequest *request) {
      |                                                  ^
      |                           const 
src/main.cpp:2083:27: note: FIX-IT applied suggested code changes
 2083 | void handleSetSampleDelay(AsyncWebServerRequest *request) {
      |                           ^
src/main.cpp:2101:6: warning: function 'handleSetDebugSettings' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2101 | void handleSetDebugSettings(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2101:1: note: FIX-IT applied suggested code changes
 2101 | void handleSetDebugSettings(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2101:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2101 | void handleSetDebugSettings(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:2101:29: note: FIX-IT applied suggested code changes
 2101 | void handleSetDebugSettings(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:2133:6: warning: function 'handleAdvancedSensorSettings' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2133 | void handleAdvancedSensorSettings(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2133:1: note: FIX-IT applied suggested code changes
 2133 | void handleAdvancedSensorSettings(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2133:58: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2133 | void handleAdvancedSensorSettings(AsyncWebServerRequest *request) {
      |                                                          ^
      |                                   const 
src/main.cpp:2133:35: note: FIX-IT applied suggested code changes
 2133 | void handleAdvancedSensorSettings(AsyncWebServerRequest *request) {
      |                                   ^
src/main.cpp:2234:15: warning: invalid case style for constant 'low' [readability-identifier-naming]
 2234 |     int const low = request->getParam("ch0ThreshLow")->value().toInt();
      |               ^~~
      |               LOW
 2235 |     int const high = request->getParam("ch0ThreshHigh")->value().toInt();
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |         ~~~         ~~~                                           ~~~
      |         LOW         LOW                                           LOW
 2237 |       colorSensor.setInterruptThresholds(low, high);
      |                                          ~~~
      |                                          LOW
 2238 |       response += ",\"ch0ThreshLow\":" + String(low) + ",\"ch0ThreshHigh\":" + String(high);
      |                                                 ~~~
      |                                                 LOW
 2239 |       Logger::info("Channel 0 thresholds set to: " + String(low) + " - " + String(high));
      |                                                             ~~~
      |                                                             LOW
src/main.cpp:2234:15: note: FIX-IT applied suggested code changes
src/main.cpp:2236:9: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |         ^
src/main.cpp:2236:21: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                     ^
src/main.cpp:2236:67: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                                                                   ^
src/main.cpp:2237:42: note: FIX-IT applied suggested code changes
 2237 |       colorSensor.setInterruptThresholds(low, high);
      |                                          ^
src/main.cpp:2238:49: note: FIX-IT applied suggested code changes
 2238 |       response += ",\"ch0ThreshLow\":" + String(low) + ",\"ch0ThreshHigh\":" + String(high);
      |                                                 ^
src/main.cpp:2239:61: note: FIX-IT applied suggested code changes
 2239 |       Logger::info("Channel 0 thresholds set to: " + String(low) + " - " + String(high));
      |                                                             ^
src/main.cpp:2235:15: warning: invalid case style for constant 'high' [readability-identifier-naming]
 2235 |     int const high = request->getParam("ch0ThreshHigh")->value().toInt();
      |               ^~~~
      |               HIGH
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                                     ~~~~         ~~~~                   ~~~~
      |                                     HIGH         HIGH                   HIGH
 2237 |       colorSensor.setInterruptThresholds(low, high);
      |                                               ~~~~
      |                                               HIGH
 2238 |       response += ",\"ch0ThreshLow\":" + String(low) + ",\"ch0ThreshHigh\":" + String(high);
      |                                                                                       ~~~~
      |                                                                                       HIGH
 2239 |       Logger::info("Channel 0 thresholds set to: " + String(low) + " - " + String(high));
      |                                                                                   ~~~~
      |                                                                                   HIGH
src/main.cpp:2235:15: note: FIX-IT applied suggested code changes
src/main.cpp:2236:37: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                                     ^
src/main.cpp:2236:50: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                                                  ^
src/main.cpp:2236:73: note: FIX-IT applied suggested code changes
 2236 |     if (low >= 0 && low <= 65535 && high >= 0 && high <= 65535 && low < high) {
      |                                                                         ^
src/main.cpp:2237:47: note: FIX-IT applied suggested code changes
 2237 |       colorSensor.setInterruptThresholds(low, high);
      |                                               ^
src/main.cpp:2238:87: note: FIX-IT applied suggested code changes
 2238 |       response += ",\"ch0ThreshLow\":" + String(low) + ",\"ch0ThreshHigh\":" + String(high);
      |                                                                                       ^
src/main.cpp:2239:83: note: FIX-IT applied suggested code changes
 2239 |       Logger::info("Channel 0 thresholds set to: " + String(low) + " - " + String(high));
      |                                                                                   ^
src/main.cpp:2257:6: warning: function 'handleSaveSettings' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2257 | void handleSaveSettings(AsyncWebServerRequest * /*request*/) {
      |      ^
      | static 
src/main.cpp:2257:1: note: FIX-IT applied suggested code changes
 2257 | void handleSaveSettings(AsyncWebServerRequest * /*request*/) {
      | ^
src/main.cpp:2288:6: warning: function 'handleUseDFRobotCalibration' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2288 | void handleUseDFRobotCalibration(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2288:1: note: FIX-IT applied suggested code changes
 2288 | void handleUseDFRobotCalibration(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2288:57: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2288 | void handleUseDFRobotCalibration(AsyncWebServerRequest *request) {
      |                                                         ^
      |                                  const 
src/main.cpp:2288:34: note: FIX-IT applied suggested code changes
 2288 | void handleUseDFRobotCalibration(AsyncWebServerRequest *request) {
      |                                  ^
src/main.cpp:2303:6: warning: function 'handleDebugVividColors' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2303 | void handleDebugVividColors(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2303:1: note: FIX-IT applied suggested code changes
 2303 | void handleDebugVividColors(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2303:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2303 | void handleDebugVividColors(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:2303:29: note: FIX-IT applied suggested code changes
 2303 | void handleDebugVividColors(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:2323:18: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 2323 |   uint16_t const X = sumX / SAMPLES;
      |                  ^
src/main.cpp:2324:18: warning: variable name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 2324 |   uint16_t const Y = sumY / SAMPLES;
      |                  ^
src/main.cpp:2325:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2325 |   uint16_t z = sumZ / SAMPLES;
      |            ^
src/main.cpp:2330:11: warning: variable name 'r1' is too short, expected at least 3 characters [readability-identifier-length]
 2330 |   uint8_t r1 = 0;
      |           ^
src/main.cpp:2331:11: warning: variable name 'g1' is too short, expected at least 3 characters [readability-identifier-length]
 2331 |   uint8_t g1 = 0;
      |           ^
src/main.cpp:2332:11: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
 2332 |   uint8_t b1 = 0;
      |           ^
src/main.cpp:2333:11: warning: variable name 'r2' is too short, expected at least 3 characters [readability-identifier-length]
 2333 |   uint8_t r2 = 0;
      |           ^
src/main.cpp:2334:11: warning: variable name 'g2' is too short, expected at least 3 characters [readability-identifier-length]
 2334 |   uint8_t g2 = 0;
      |           ^
src/main.cpp:2335:11: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
 2335 |   uint8_t b2 = 0;
      |           ^
src/main.cpp:2336:11: warning: variable name 'r3' is too short, expected at least 3 characters [readability-identifier-length]
 2336 |   uint8_t r3 = 0;
      |           ^
src/main.cpp:2337:11: warning: variable name 'g3' is too short, expected at least 3 characters [readability-identifier-length]
 2337 |   uint8_t g3 = 0;
      |           ^
src/main.cpp:2338:11: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
 2338 |   uint8_t b3 = 0;
      |           ^
src/main.cpp:2347:24: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2347 |   float const X_NORM = X / 65535.0f;
      |                        ^
src/main.cpp:2348:24: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2348 |   float const Y_NORM = Y / 65535.0f;
      |                        ^
src/main.cpp:2349:24: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2349 |   float const Z_NORM = z / 65535.0f;
      |                        ^
src/main.cpp:2385:49: warning: conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators [readability-avoid-nested-conditional-operator]
 2385 |               String(z > X && z > Y ? "blue" : (Y > X ? "green" : "red")) + "\",";
      |                                                 ^
src/main.cpp:2385:22: note: parent conditional operator here
 2385 |               String(z > X && z > Y ? "blue" : (Y > X ? "green" : "red")) + "\",";
      |                      ^
src/main.cpp:2388:36: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2388 |       R"("matrixUsed":")" + String(Y > settings.dynamicThreshold ? "bright" : "dark") + "\",";
      |                                    ^
src/main.cpp:2400:6: warning: function 'handleFixBlueChannel' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2400 | void handleFixBlueChannel(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2400:1: note: FIX-IT applied suggested code changes
 2400 | void handleFixBlueChannel(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2400:50: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2400 | void handleFixBlueChannel(AsyncWebServerRequest *request) {
      |                                                  ^
      |                           const 
src/main.cpp:2400:27: note: FIX-IT applied suggested code changes
 2400 | void handleFixBlueChannel(AsyncWebServerRequest *request) {
      |                           ^
src/main.cpp:2423:18: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 2423 |   uint16_t const X = colorSensor.getX();
      |                  ^
src/main.cpp:2424:18: warning: variable name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 2424 |   uint16_t const Y = colorSensor.getY();
      |                  ^
src/main.cpp:2425:18: warning: variable name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 2425 |   uint16_t const Z = colorSensor.getZ();
      |                  ^
src/main.cpp:2427:11: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 2427 |   uint8_t r = 0;
      |           ^
src/main.cpp:2428:11: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
 2428 |   uint8_t g = 0;
      |           ^
src/main.cpp:2429:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 2429 |   uint8_t b = 0;
      |           ^
src/main.cpp:2454:6: warning: function 'handleFixVividColors' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2454 | void handleFixVividColors(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2454:1: note: FIX-IT applied suggested code changes
 2454 | void handleFixVividColors(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2454:50: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2454 | void handleFixVividColors(AsyncWebServerRequest *request) {
      |                                                  ^
      |                           const 
src/main.cpp:2454:27: note: FIX-IT applied suggested code changes
 2454 | void handleFixVividColors(AsyncWebServerRequest *request) {
      |                           ^
src/main.cpp:2495:18: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 2495 |   uint16_t const X = colorSensor.getXData();
      |                  ^
src/main.cpp:2496:18: warning: variable name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 2496 |   uint16_t const Y = colorSensor.getYData();
      |                  ^
src/main.cpp:2497:18: warning: variable name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 2497 |   uint16_t const Z = colorSensor.getZData();
      |                  ^
src/main.cpp:2501:11: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 2501 |   uint8_t r = 0;
      |           ^
src/main.cpp:2502:11: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
 2502 |   uint8_t g = 0;
      |           ^
src/main.cpp:2503:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 2503 |   uint8_t b = 0;
      |           ^
src/main.cpp:2548:14: warning: variable 'CURRENTLY_SATURATED' is not initialized [cppcoreguidelines-init-variables]
 2548 |   bool const CURRENTLY_SATURATED = TCS3430AutoGain::getSaturationStatus();
      |              ^                                                           
      |                                                                           = false
src/main.cpp:2548:74: note: FIX-IT applied suggested code changes
 2548 |   bool const CURRENTLY_SATURATED = TCS3430AutoGain::getSaturationStatus();
      |                                                                          ^
src/main.cpp:2586:16: warning: variable 'SATURATED' is not initialized [cppcoreguidelines-init-variables]
 2586 |     bool const SATURATED = TCS3430AutoGain::getSaturationStatus();
      |                ^                                                 
      |                                                                   = false
src/main.cpp:2586:66: note: FIX-IT applied suggested code changes
 2586 |     bool const SATURATED = TCS3430AutoGain::getSaturationStatus();
      |                                                                  ^
src/main.cpp:2601:6: warning: function 'handleAutoOptimizeSensor' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2601 | void handleAutoOptimizeSensor(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2601:1: note: FIX-IT applied suggested code changes
 2601 | void handleAutoOptimizeSensor(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2601:54: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2601 | void handleAutoOptimizeSensor(AsyncWebServerRequest *request) {
      |                                                      ^
      |                               const 
src/main.cpp:2601:31: note: FIX-IT applied suggested code changes
 2601 | void handleAutoOptimizeSensor(AsyncWebServerRequest *request) {
      |                               ^
src/main.cpp:2622:5: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
 2622 |     switch (GAIN_VALUE) {
      |     ^
src/main.cpp:2623:7: warning: switch has 5 consecutive identical branches [bugprone-branch-clone]
 2623 |       case 1:
      |       ^
src/main.cpp:2637:14: note: last of these clones ends here
 2637 |         break;
      |              ^
src/main.cpp:2668:6: warning: function 'handleSensorStatus' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2668 | void handleSensorStatus(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2668:1: note: FIX-IT applied suggested code changes
 2668 | void handleSensorStatus(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2668:48: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2668 | void handleSensorStatus(AsyncWebServerRequest *request) {
      |                                                ^
      |                         const 
src/main.cpp:2668:25: note: FIX-IT applied suggested code changes
 2668 | void handleSensorStatus(AsyncWebServerRequest *request) {
      |                         ^
src/main.cpp:2672:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 2672 |   uint16_t x = 0;
      |            ^
src/main.cpp:2673:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 2673 |   uint16_t y = 0;
      |            ^
src/main.cpp:2674:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2674 |   uint16_t z = 0;
      |            ^
src/main.cpp:2683:14: warning: variable 'WAIT_ENABLED' is not initialized [cppcoreguidelines-init-variables]
 2683 |   bool const WAIT_ENABLED = TCS3430AutoGain::isWaitEnabled();
      |              ^                                              
      |                                                              = false
src/main.cpp:2683:61: note: FIX-IT applied suggested code changes
 2683 |   bool const WAIT_ENABLED = TCS3430AutoGain::isWaitEnabled();
      |                                                             ^
src/main.cpp:2684:14: warning: variable 'WAIT_LONG' is not initialized [cppcoreguidelines-init-variables]
 2684 |   bool const WAIT_LONG = TCS3430AutoGain::getWaitLong();
      |              ^                                         
      |                                                         = false
src/main.cpp:2684:56: note: FIX-IT applied suggested code changes
 2684 |   bool const WAIT_LONG = TCS3430AutoGain::getWaitLong();
      |                                                        ^
src/main.cpp:2687:14: warning: variable 'DATA_READY' is not initialized [cppcoreguidelines-init-variables]
 2687 |   bool const DATA_READY = TCS3430AutoGain::dataReady();
      |              ^                                        
      |                                                        = false
src/main.cpp:2687:55: note: FIX-IT applied suggested code changes
 2687 |   bool const DATA_READY = TCS3430AutoGain::dataReady();
      |                                                       ^
src/main.cpp:2688:8: warning: variable 'saturated' is not initialized [cppcoreguidelines-init-variables]
 2688 |   bool saturated = TCS3430AutoGain::getSaturationStatus();
      |        ^                                                 
      |                                                           = false
src/main.cpp:2688:58: note: FIX-IT applied suggested code changes
 2688 |   bool saturated = TCS3430AutoGain::getSaturationStatus();
      |                                                          ^
src/main.cpp:2690:18: warning: variable 'MAX_COUNT' is not initialized [cppcoreguidelines-init-variables]
 2690 |   uint16_t const MAX_COUNT = TCS3430AutoGain::getMaxCount();
      |                  ^                                         
      |                                                             = 0
src/main.cpp:2690:60: note: FIX-IT applied suggested code changes
 2690 |   uint16_t const MAX_COUNT = TCS3430AutoGain::getMaxCount();
      |                                                            ^
src/main.cpp:2693:17: warning: variable 'AUTO_ZERO_MODE' is not initialized [cppcoreguidelines-init-variables]
 2693 |   uint8_t const AUTO_ZERO_MODE = TCS3430AutoGain::getAutoZeroMode();
      |                 ^                                                  
      |                                                                     = 0
src/main.cpp:2693:68: note: FIX-IT applied suggested code changes
 2693 |   uint8_t const AUTO_ZERO_MODE = TCS3430AutoGain::getAutoZeroMode();
      |                                                                    ^
src/main.cpp:2694:17: warning: variable 'AUTO_ZERO_NTH' is not initialized [cppcoreguidelines-init-variables]
 2694 |   uint8_t const AUTO_ZERO_NTH = TCS3430AutoGain::getAutoZeroNTHIteration();
      |                 ^                                                         
      |                                                                            = 0
src/main.cpp:2694:75: note: FIX-IT applied suggested code changes
 2694 |   uint8_t const AUTO_ZERO_NTH = TCS3430AutoGain::getAutoZeroNTHIteration();
      |                                                                           ^
src/main.cpp:2697:25: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2697 |   float const X_UTIL = (x / (float)MAX_COUNT) * 100.0f;
      |                         ^
src/main.cpp:2698:25: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2698 |   float const Y_UTIL = (y / (float)MAX_COUNT) * 100.0f;
      |                         ^
src/main.cpp:2699:25: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2699 |   float const Z_UTIL = (z / (float)MAX_COUNT) * 100.0f;
      |                         ^
src/main.cpp:2703:40: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2703 |   if (saturated || max(max(x, y), z) > MAX_COUNT * 0.95f) {
      |                                        ^
src/main.cpp:2705:34: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2705 |   } else if (max(max(x, y), z) < MAX_COUNT * 0.05f) {
      |                                  ^
src/main.cpp:2707:34: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 2707 |   } else if (max(max(x, y), z) < MAX_COUNT * 0.15f) {
      |                                  ^
src/main.cpp:2760:6: warning: function 'handleFixBlackReadings' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2760 | void handleFixBlackReadings(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2760:1: note: FIX-IT applied suggested code changes
 2760 | void handleFixBlackReadings(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2760:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2760 | void handleFixBlackReadings(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:2760:29: note: FIX-IT applied suggested code changes
 2760 | void handleFixBlackReadings(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:2783:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 2783 |   uint16_t x = 0;
      |            ^
src/main.cpp:2784:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 2784 |   uint16_t y = 0;
      |            ^
src/main.cpp:2785:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2785 |   uint16_t z = 0;
      |            ^
src/main.cpp:2825:6: warning: function 'handleCalibrateBlackReference' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2825 | void handleCalibrateBlackReference(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2825:1: note: FIX-IT applied suggested code changes
 2825 | void handleCalibrateBlackReference(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2825:59: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2825 | void handleCalibrateBlackReference(AsyncWebServerRequest *request) {
      |                                                           ^
      |                                    const 
src/main.cpp:2825:36: note: FIX-IT applied suggested code changes
 2825 | void handleCalibrateBlackReference(AsyncWebServerRequest *request) {
      |                                    ^
src/main.cpp:2846:14: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 2846 |     uint16_t x = 0;
      |              ^
src/main.cpp:2847:14: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 2847 |     uint16_t y = 0;
      |              ^
src/main.cpp:2848:14: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2848 |     uint16_t z = 0;
      |              ^
src/main.cpp:2861:18: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 2861 |   uint16_t const X = sumX / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2862:18: warning: variable name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 2862 |   uint16_t const Y = sumY / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2863:18: warning: variable name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 2863 |   uint16_t const Z = sumZ / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2903:6: warning: function 'handleCalibrateWhiteReference' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2903 | void handleCalibrateWhiteReference(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2903:1: note: FIX-IT applied suggested code changes
 2903 | void handleCalibrateWhiteReference(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2903:59: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2903 | void handleCalibrateWhiteReference(AsyncWebServerRequest *request) {
      |                                                           ^
      |                                    const 
src/main.cpp:2903:36: note: FIX-IT applied suggested code changes
 2903 | void handleCalibrateWhiteReference(AsyncWebServerRequest *request) {
      |                                    ^
src/main.cpp:2916:14: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 2916 |     uint16_t x = 0;
      |              ^
src/main.cpp:2917:14: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 2917 |     uint16_t y = 0;
      |              ^
src/main.cpp:2918:14: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2918 |     uint16_t z = 0;
      |              ^
src/main.cpp:2931:18: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
 2931 |   uint16_t const X = sumX / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2932:18: warning: variable name 'Y' is too short, expected at least 3 characters [readability-identifier-length]
 2932 |   uint16_t const Y = sumY / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2933:18: warning: variable name 'Z' is too short, expected at least 3 characters [readability-identifier-length]
 2933 |   uint16_t const Z = sumZ / CALIBRATION_SAMPLES;
      |                  ^
src/main.cpp:2981:6: warning: function 'handleCalibrateVividWhite' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 2981 | void handleCalibrateVividWhite(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:2981:1: note: FIX-IT applied suggested code changes
 2981 | void handleCalibrateVividWhite(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:2981:55: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 2981 | void handleCalibrateVividWhite(AsyncWebServerRequest *request) {
      |                                                       ^
      |                                const 
src/main.cpp:2981:32: note: FIX-IT applied suggested code changes
 2981 | void handleCalibrateVividWhite(AsyncWebServerRequest *request) {
      |                                ^
src/main.cpp:2995:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 2995 |   uint16_t x = 0;
      |            ^
src/main.cpp:2996:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 2996 |   uint16_t y = 0;
      |            ^
src/main.cpp:2997:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 2997 |   uint16_t z = 0;
      |            ^
src/main.cpp:3014:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 3014 |   settings.calibrationData.maxX = (uint16_t)(settings.calibrationData.maxX * rAdjust);
      |                                              ^
src/main.cpp:3015:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 3015 |   settings.calibrationData.maxY = (uint16_t)(settings.calibrationData.maxY * gAdjust);
      |                                              ^
src/main.cpp:3016:46: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
 3016 |   settings.calibrationData.maxZ = (uint16_t)(settings.calibrationData.maxZ * bAdjust);
      |                                              ^
src/main.cpp:3052:6: warning: function 'handleGetCalibrationData' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 3052 | void handleGetCalibrationData(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:3052:1: note: FIX-IT applied suggested code changes
 3052 | void handleGetCalibrationData(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:3052:54: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 3052 | void handleGetCalibrationData(AsyncWebServerRequest *request) {
      |                                                      ^
      |                               const 
src/main.cpp:3052:31: note: FIX-IT applied suggested code changes
 3052 | void handleGetCalibrationData(AsyncWebServerRequest *request) {
      |                               ^
src/main.cpp:3085:6: warning: function 'handleResetCalibration' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 3085 | void handleResetCalibration(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:3085:1: note: FIX-IT applied suggested code changes
 3085 | void handleResetCalibration(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:3085:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 3085 | void handleResetCalibration(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:3085:29: note: FIX-IT applied suggested code changes
 3085 | void handleResetCalibration(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:3117:6: warning: function 'handleDiagnoseCalibration' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 3117 | void handleDiagnoseCalibration(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:3117:1: note: FIX-IT applied suggested code changes
 3117 | void handleDiagnoseCalibration(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:3117:55: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 3117 | void handleDiagnoseCalibration(AsyncWebServerRequest *request) {
      |                                                       ^
      |                                const 
src/main.cpp:3117:32: note: FIX-IT applied suggested code changes
 3117 | void handleDiagnoseCalibration(AsyncWebServerRequest *request) {
      |                                ^
src/main.cpp:3121:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 3121 |   uint16_t x = 0;
      |            ^
src/main.cpp:3122:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 3122 |   uint16_t y = 0;
      |            ^
src/main.cpp:3123:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 3123 |   uint16_t z = 0;
      |            ^
src/main.cpp:3174:6: warning: function 'handleOptimizeAccuracy' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 3174 | void handleOptimizeAccuracy(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:3174:1: note: FIX-IT applied suggested code changes
 3174 | void handleOptimizeAccuracy(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:3174:52: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 3174 | void handleOptimizeAccuracy(AsyncWebServerRequest *request) {
      |                                                    ^
      |                             const 
src/main.cpp:3174:29: note: FIX-IT applied suggested code changes
 3174 | void handleOptimizeAccuracy(AsyncWebServerRequest *request) {
      |                             ^
src/main.cpp:3186:14: warning: variable 'AUTO_GAIN_SUCCESS' is not initialized [cppcoreguidelines-init-variables]
 3186 |   bool const AUTO_GAIN_SUCCESS = colorSensor.autoGain(800, TCS3430Gain::GAIN_16X, 250.0f);
      |              ^                                           
      |                                                           = false
src/main.cpp:3186:58: note: FIX-IT applied suggested code changes
 3186 |   bool const AUTO_GAIN_SUCCESS = colorSensor.autoGain(800, TCS3430Gain::GAIN_16X, 250.0f);
      |                                                          ^
src/main.cpp:3192:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 3192 |   uint16_t x = 0;
      |            ^
src/main.cpp:3193:12: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 3193 |   uint16_t y = 0;
      |            ^
src/main.cpp:3194:12: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 3194 |   uint16_t z = 0;
      |            ^
src/main.cpp:3236:6: warning: function 'handleTestAllImprovements' can be made static or moved into an anonymous namespace to enforce internal linkage [misc-use-internal-linkage]
 3236 | void handleTestAllImprovements(AsyncWebServerRequest *request) {
      |      ^
      | static 
src/main.cpp:3236:1: note: FIX-IT applied suggested code changes
 3236 | void handleTestAllImprovements(AsyncWebServerRequest *request) {
      | ^
src/main.cpp:3236:55: warning: pointer parameter 'request' can be pointer to const [readability-non-const-parameter]
 3236 | void handleTestAllImprovements(AsyncWebServerRequest *request) {
      |                                                       ^
      |                                const 
src/main.cpp:3236:32: note: FIX-IT applied suggested code changes
 3236 | void handleTestAllImprovements(AsyncWebServerRequest *request) {
      |                                ^
src/main.cpp:3247:14: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
 3247 |     uint16_t x = 0;
      |              ^
src/main.cpp:3248:14: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
 3248 |     uint16_t y = 0;
      |              ^
src/main.cpp:3249:14: warning: variable name 'z' is too short, expected at least 3 characters [readability-identifier-length]
 3249 |     uint16_t z = 0;
      |              ^
src/main.cpp:3267:14: warning: variable 'AUTO_GAIN_WORKING' is not initialized [cppcoreguidelines-init-variables]
 3267 |   bool const AUTO_GAIN_WORKING = colorSensor.autoGain(500, TCS3430Gain::GAIN_16X, 200.0f);
      |              ^                                           
      |                                                           = false
src/main.cpp:3267:58: note: FIX-IT applied suggested code changes
 3267 |   bool const AUTO_GAIN_WORKING = colorSensor.autoGain(500, TCS3430Gain::GAIN_16X, 200.0f);
      |                                                          ^
src/main.cpp:3302:26: warning: conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators [readability-avoid-nested-conditional-operator]
 3302 |                        : (score >= 80) ? "B"
      |                          ^
src/main.cpp:3301:24: note: parent conditional operator here
 3301 |   String const GRADE = (score >= 90)   ? "A"
      |                        ^
src/main.cpp:3303:26: warning: conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators [readability-avoid-nested-conditional-operator]
 3303 |                        : (score >= 70) ? "C"
      |                          ^
src/main.cpp:3302:26: note: parent conditional operator here
 3302 |                        : (score >= 80) ? "B"
      |                          ^
src/main.cpp:3304:26: warning: conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators [readability-avoid-nested-conditional-operator]
 3304 |                        : (score >= 60) ? "D"
      |                          ^
src/main.cpp:3303:26: note: parent conditional operator here
 3303 |                        : (score >= 70) ? "C"
      |                          ^
src/main.cpp:3334:24: warning: conditional operator is used as sub-expression of parent conditional operator, refrain from using nested conditional operators [readability-avoid-nested-conditional-operator]
 3334 |                      : maxChannel > 45000 ? "too_close_or_bright"
      |                        ^
src/main.cpp:3333:22: note: parent conditional operator here
 3333 |               String(OPTIMAL_RANGE        ? "good"
      |                      ^
src\CIEDE2000.h:105:23: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                       ^
src\CIEDE2000.h:105:34: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                                  ^
src\CIEDE2000.h:105:45: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                                             ^
src\CIEDE2000.h:105:56: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                                                        ^
src\CIEDE2000.h:105:67: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                                                                   ^
src\CIEDE2000.h:105:78: warning: parameter name 'z' is too short, expected at least 3 characters [readability-identifier-length]
  105 | void rgbToXYZ(uint8_t r, uint8_t g, uint8_t b, double &x, double &y, double &z);
      |                                                                              ^
src\CIEDE2000.h:116:22: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  116 | void xyzToLAB(double x, double y, double z, CIEDE2000::LAB &lab);
      |                      ^
src\CIEDE2000.h:116:32: warning: parameter name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  116 | void xyzToLAB(double x, double y, double z, CIEDE2000::LAB &lab);
      |                                ^
src\CIEDE2000.h:116:42: warning: parameter name 'z' is too short, expected at least 3 characters [readability-identifier-length]
  116 | void xyzToLAB(double x, double y, double z, CIEDE2000::LAB &lab);
      |                                          ^
src\CIEDE2000.h:127:23: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  127 | void rgbToLAB(uint8_t r, uint8_t g, uint8_t b, CIEDE2000::LAB &lab);
      |                       ^
src\CIEDE2000.h:127:34: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  127 | void rgbToLAB(uint8_t r, uint8_t g, uint8_t b, CIEDE2000::LAB &lab);
      |                                  ^
src\CIEDE2000.h:127:45: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  127 | void rgbToLAB(uint8_t r, uint8_t g, uint8_t b, CIEDE2000::LAB &lab);
      |                                             ^
src\CIEDE2000.h:145:40: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
  145 | std::ostream &operator<<(std::ostream &s, const CIEDE2000::LAB &labColor);
      |                                        ^
src\dulux_simple_reader.h:27:11: warning: member variable 'r' has public visibility [misc-non-private-member-variables-in-classes]
   27 |   uint8_t r, g, b;      // RGB values
      |           ^
src\dulux_simple_reader.h:27:14: warning: member variable 'g' has public visibility [misc-non-private-member-variables-in-classes]
   27 |   uint8_t r, g, b;      // RGB values
      |              ^
src\dulux_simple_reader.h:27:17: warning: member variable 'b' has public visibility [misc-non-private-member-variables-in-classes]
   27 |   uint8_t r, g, b;      // RGB values
      |                 ^
src\dulux_simple_reader.h:28:12: warning: member variable 'lrv_scaled' has public visibility [misc-non-private-member-variables-in-classes]
   28 |   uint16_t lrv_scaled;  // LRV * 100
      |            ^
src\dulux_simple_reader.h:29:12: warning: member variable 'id' has public visibility [misc-non-private-member-variables-in-classes]
   29 |   uint32_t id;          // Color ID
      |            ^
src\dulux_simple_reader.h:30:3: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
   30 |   char name[64];        // Fixed-size name buffer
      |   ^
src\dulux_simple_reader.h:30:8: warning: member variable 'name' has public visibility [misc-non-private-member-variables-in-classes]
   30 |   char name[64];        // Fixed-size name buffer
      |        ^
src\dulux_simple_reader.h:31:3: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
   31 |   char code[16];        // Fixed-size code buffer
      |   ^
src\dulux_simple_reader.h:31:8: warning: member variable 'code' has public visibility [misc-non-private-member-variables-in-classes]
   31 |   char code[16];        // Fixed-size code buffer
      |        ^
src\dulux_simple_reader.h:32:8: warning: member variable 'light_text' has public visibility [misc-non-private-member-variables-in-classes]
   32 |   bool light_text;      // Light text flag
      |        ^
src\dulux_simple_reader.h:38:12: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
   38 |     return lrv_scaled / 100.0f;
      |            ^
src\dulux_simple_reader.h:48:7: warning: class 'DuluxSimpleReader' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   48 | class DuluxSimpleReader {
      |       ^
src\dulux_simple_reader.h:66:13: warning: variable 'length' is not initialized [cppcoreguidelines-init-variables]
   66 |     uint8_t length = file.read() = 0 = 0 = 0;
      |             ^                               
      |                                              = 0
src\dulux_simple_reader.h:66:45: note: FIX-IT applied suggested code changes
   66 |     uint8_t length = file.read() = 0 = 0 = 0;
      |                                             ^
src\dulux_simple_reader.h:68:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   68 |       buffer[0] = '\0';
      |       ^
src\dulux_simple_reader.h:75:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   75 |       buffer[buffer_size - 1] = '\0';
      |       ^
src\dulux_simple_reader.h:79:14: warning: variable 'bytesRead' is not initialized [cppcoreguidelines-init-variables]
   79 |       size_t bytesRead = file.readBytes(buffer = 0 = 0 = 0, length);
      |              ^                                            
      |                                                            = 0
src\dulux_simple_reader.h:79:59: note: FIX-IT applied suggested code changes
   79 |       size_t bytesRead = file.readBytes(buffer = 0 = 0 = 0, length);
      |                                                           ^
src\dulux_simple_reader.h:84:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   84 |       buffer[length] = '\0';
      |       ^
src\dulux_simple_reader.h:94:3: warning: constructor does not initialize these fields: file [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
   50 |   DuluxSimpleReader() {
      |   ^
src\dulux_simple_reader.h:50:12: note: FIX-IT applied suggested code changes
   50 |   File file;
      |            ^
src\dulux_simple_reader.h:120:20: warning: invalid case style for constant 'magic' [readability-identifier-naming]
  120 |     uint32_t const magic = 0;
      |                    ^~~~~
      |                    MAGIC
  121 |     uint32_t const version = 0;
  122 |     uint32_t const colorCount = 0;
  123 |     uint32_t const reserved = 0;
  124 | 
  125 |     if (file.readBytes((char*)&magic, 4) != 4 || file.readBytes((char*)&version, 4) != 4 ||
  126 |         file.readBytes((char*)&color_count, 4) != 4 || file.readBytes((char*)&reserved, 4) != 4) {
  127 |       Serial.println("Failed to read header");
  128 |       file.close();
  129 |       return false;
  130 |     }
  131 | 
  132 |     if (magic != DULUX_MAGIC_NUMBER) {
      |         ~~~~~
      |         MAGIC
src\dulux_simple_reader.h:120:20: note: FIX-IT applied suggested code changes
src\dulux_simple_reader.h:132:9: note: FIX-IT applied suggested code changes
  132 |     if (magic != DULUX_MAGIC_NUMBER) {
      |         ^
src\dulux_simple_reader.h:121:20: warning: invalid case style for constant 'version' [readability-identifier-naming]
  121 |     uint32_t const version = 0;
      |                    ^~~~~~~
      |                    VERSION
src\dulux_simple_reader.h:121:20: note: FIX-IT applied suggested code changes
src\dulux_simple_reader.h:138:9: note: FIX-IT applied suggested code changes
  138 |     if (version != DULUX_BINARY_VERSION) {
      |         ^
src\dulux_simple_reader.h:122:20: warning: invalid case style for constant 'colorCount' [readability-identifier-naming]
  122 |     uint32_t const colorCount = 0;
      |                    ^~~~~~~~~~
      |                    COLOR_COUNT
src\dulux_simple_reader.h:122:20: note: FIX-IT applied suggested code changes
src\dulux_simple_reader.h:144:20: note: FIX-IT applied suggested code changes
  144 |     total_colors = colorCount;
      |                    ^
src\dulux_simple_reader.h:123:20: warning: invalid case style for constant 'reserved' [readability-identifier-naming]
  123 |     uint32_t const reserved = 0;
      |                    ^~~~~~~~
      |                    RESERVED
src\dulux_simple_reader.h:123:20: note: FIX-IT applied suggested code changes
src\dulux_simple_reader.h:168:9: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
  168 |     int r = file.read() = 0 = 0 = 0;
      |         ^                          
      |                                     = 0
src\dulux_simple_reader.h:168:36: note: FIX-IT applied suggested code changes
  168 |     int r = file.read() = 0 = 0 = 0;
      |                                    ^
src\dulux_simple_reader.h:168:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  168 |     int r = file.read() = 0 = 0 = 0;
      |         ^
src\dulux_simple_reader.h:169:9: warning: variable 'g' is not initialized [cppcoreguidelines-init-variables]
  169 |     int g = file.read() = 0 = 0 = 0;
      |         ^                          
      |                                     = 0
src\dulux_simple_reader.h:169:36: note: FIX-IT applied suggested code changes
  169 |     int g = file.read() = 0 = 0 = 0;
      |                                    ^
src\dulux_simple_reader.h:169:9: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  169 |     int g = file.read() = 0 = 0 = 0;
      |         ^
src\dulux_simple_reader.h:170:9: warning: variable 'b' is not initialized [cppcoreguidelines-init-variables]
  170 |     int b = file.read() = 0 = 0 = 0;
      |         ^                          
      |                                     = 0
src\dulux_simple_reader.h:170:36: note: FIX-IT applied suggested code changes
  170 |     int b = file.read() = 0 = 0 = 0;
      |                                    ^
src\dulux_simple_reader.h:170:9: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  170 |     int b = file.read() = 0 = 0 = 0;
      |         ^
src\dulux_simple_reader.h:194:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
  194 |     if (!readStringToBuffer(color.name, sizeof(color.name))) {
      |                             ^
src\dulux_simple_reader.h:200:29: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
  200 |     if (!readStringToBuffer(color.code, sizeof(color.code))) {
      |                             ^
src\dulux_simple_reader.h:206:9: warning: variable 'lightFlag' is not initialized [cppcoreguidelines-init-variables]
  206 |     int lightFlag = file.read() = 0 = 0 = 0;
      |         ^                                  
      |                                             = 0
src\dulux_simple_reader.h:206:44: note: FIX-IT applied suggested code changes
  206 |     int lightFlag = file.read() = 0 = 0 = 0;
      |                                            ^
src\dulux_simple_reader.h:315:20: warning: variable name 'DR' is too short, expected at least 3 characters [readability-identifier-length]
  315 |         auto const DR = (float)(target_r - currentColor.r);
      |                    ^
src\dulux_simple_reader.h:316:20: warning: variable name 'DG' is too short, expected at least 3 characters [readability-identifier-length]
  316 |         auto const DG = (float)(target_g - currentColor.g);
      |                    ^
src\dulux_simple_reader.h:317:20: warning: variable name 'DB' is too short, expected at least 3 characters [readability-identifier-length]
  317 |         auto const DB = (float)(target_b - currentColor.b);
      |                    ^
src\lightweight_kdtree.h:54:27: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   54 |   void deallocate(pointer p, size_type /*unused*/) {
      |                           ^
src\lightweight_kdtree.h:72:11: warning: member variable 'r' has public visibility [misc-non-private-member-variables-in-classes]
   72 |   uint8_t r, g, b;  // RGB values (3 bytes)
      |           ^
src\lightweight_kdtree.h:72:14: warning: member variable 'g' has public visibility [misc-non-private-member-variables-in-classes]
   72 |   uint8_t r, g, b;  // RGB values (3 bytes)
      |              ^
src\lightweight_kdtree.h:72:17: warning: member variable 'b' has public visibility [misc-non-private-member-variables-in-classes]
   72 |   uint8_t r, g, b;  // RGB values (3 bytes)
      |                 ^
src\lightweight_kdtree.h:73:12: warning: member variable 'index' has public visibility [misc-non-private-member-variables-in-classes]
   73 |   uint16_t index;   // Index in original database (2 bytes)
      |            ^
src\lightweight_kdtree.h:77:22: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
   77 |   ColorPoint(uint8_t r, uint8_t g, uint8_t b, uint16_t idx) : r(r), g(g), b(b), index(idx) {
      |                      ^
src\lightweight_kdtree.h:77:33: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   77 |   ColorPoint(uint8_t r, uint8_t g, uint8_t b, uint16_t idx) : r(r), g(g), b(b), index(idx) {
      |                                 ^
src\lightweight_kdtree.h:77:44: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   77 |   ColorPoint(uint8_t r, uint8_t g, uint8_t b, uint16_t idx) : r(r), g(g), b(b), index(idx) {
      |                                            ^
src\lightweight_kdtree.h:83:14: warning: member variable 'point' has public visibility [misc-non-private-member-variables-in-classes]
   83 |   ColorPoint point;  // Color data (5 bytes)
      |              ^
src\lightweight_kdtree.h:84:11: warning: member variable 'axis' has public visibility [misc-non-private-member-variables-in-classes]
   84 |   uint8_t axis{0};   // Splitting axis 0=R, 1=G, 2=B (1 byte)
      |           ^
src\lightweight_kdtree.h:85:12: warning: member variable 'left' has public visibility [misc-non-private-member-variables-in-classes]
   85 |   uint16_t left{0};  // Index of left child (2 bytes, 0 = no child)
      |            ^
src\lightweight_kdtree.h:86:12: warning: member variable 'right' has public visibility [misc-non-private-member-variables-in-classes]
   86 |   uint16_t right{0};  // Index of right child (2 bytes, 0 = no child)
      |            ^
src\lightweight_kdtree.h:91:7: warning: class 'LightweightKDTree' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions,hicpp-special-member-functions]
   91 | class LightweightKDTree {
      |       ^
src\lightweight_kdtree.h:101:14: warning: member variable 'node_index' has public visibility [misc-non-private-member-variables-in-classes]
  101 |     uint16_t node_index;
      |              ^
src\lightweight_kdtree.h:102:12: warning: member variable 'start' has public visibility [misc-non-private-member-variables-in-classes]
  102 |     size_t start;
      |            ^
src\lightweight_kdtree.h:103:12: warning: member variable 'end' has public visibility [misc-non-private-member-variables-in-classes]
  103 |     size_t end;
      |            ^
src\lightweight_kdtree.h:104:13: warning: member variable 'depth' has public visibility [misc-non-private-member-variables-in-classes]
  104 |     uint8_t depth;
      |             ^
src\lightweight_kdtree.h:106:24: warning: parameter name 'ni' is too short, expected at least 3 characters [readability-identifier-length]
  106 |     BuildItem(uint16_t ni, size_t s, size_t e, uint8_t d)
      |                        ^
src\lightweight_kdtree.h:106:35: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
  106 |     BuildItem(uint16_t ni, size_t s, size_t e, uint8_t d)
      |                                   ^
src\lightweight_kdtree.h:106:45: warning: parameter name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  106 |     BuildItem(uint16_t ni, size_t s, size_t e, uint8_t d)
      |                                             ^
src\lightweight_kdtree.h:106:56: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  106 |     BuildItem(uint16_t ni, size_t s, size_t e, uint8_t d)
      |                                                        ^
src\lightweight_kdtree.h:112:50: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  112 |   static uint8_t getCoordinate(const ColorPoint& p, uint8_t axis) {
      |                                                  ^
src\lightweight_kdtree.h:126:53: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  126 |   static uint32_t distanceSquared(const ColorPoint& a, const ColorPoint& b) {
      |                                                     ^
src\lightweight_kdtree.h:126:74: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  126 |   static uint32_t distanceSquared(const ColorPoint& a, const ColorPoint& b) {
      |                                                                          ^
src\lightweight_kdtree.h:127:19: warning: variable name 'DR' is too short, expected at least 3 characters [readability-identifier-length]
  127 |     int32_t const DR = (int32_t)a.r - (int32_t)b.r;
      |                   ^
src\lightweight_kdtree.h:128:19: warning: variable name 'DG' is too short, expected at least 3 characters [readability-identifier-length]
  128 |     int32_t const DG = (int32_t)a.g - (int32_t)b.g;
      |                   ^
src\lightweight_kdtree.h:129:19: warning: variable name 'DB' is too short, expected at least 3 characters [readability-identifier-length]
  129 |     int32_t const DB = (int32_t)a.b - (int32_t)b.b;
      |                   ^
src\lightweight_kdtree.h:289:18: warning: variable 'FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  289 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                  ^                              
      |                                                  = 0
src\lightweight_kdtree.h:289:49: note: FIX-IT applied suggested code changes
  289 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                                                 ^
src\lightweight_kdtree.h:290:18: warning: variable 'FREE_HEAP' is not initialized [cppcoreguidelines-init-variables]
  290 |     size_t const FREE_HEAP = ESP.getFreeHeap();
      |                  ^                            
      |                                                = 0
src\lightweight_kdtree.h:290:47: note: FIX-IT applied suggested code changes
  290 |     size_t const FREE_HEAP = ESP.getFreeHeap();
      |                                               ^
src\lightweight_kdtree.h:294:22: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  294 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                      ^
src\lightweight_kdtree.h:294:22: note: make conversion explicit to silence this warning
   17 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                      ^~~~~~~~~~~~~~~
      |                      static_cast<size_t>( )
src\lightweight_kdtree.h:294:22: note: perform multiplication in a wider type
  294 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                      ^~~~~~~~
      |                      static_cast<long long>( )
src\lightweight_kdtree.h:294:54: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  294 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                                                      ^
src\lightweight_kdtree.h:294:54: note: make conversion explicit to silence this warning
  294 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                                                      ^~~~~~~~~~~~~~~
      |                                                      static_cast<size_t>( )
src\lightweight_kdtree.h:294:54: note: perform multiplication in a wider type
  294 |         FREE_PSRAM > 2 * 1024 * 1024 ? FREE_PSRAM - (2 * 1024 * 1024) : 0;
      |                                                      ^~~~~~~~
      |                                                      static_cast<long long>( )
src\lightweight_kdtree.h:338:18: warning: variable 'FREE_PSRAM' is not initialized [cppcoreguidelines-init-variables]
  338 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                  ^                              
      |                                                  = 0
src\lightweight_kdtree.h:338:49: note: FIX-IT applied suggested code changes
  338 |     size_t const FREE_PSRAM = ESP.getFreePsram();
      |                                                 ^
src\lightweight_kdtree.h:343:9: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  343 |     if (REQUIRED_MEMORY > FREE_PSRAM * 0.8) {  // Use only 80% of available PSRAM
      |         ^
src\lightweight_kdtree.h:343:27: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  343 |     if (REQUIRED_MEMORY > FREE_PSRAM * 0.8) {  // Use only 80% of available PSRAM
      |                           ^
src\lightweight_kdtree.h:344:22: warning: narrowing conversion from 'double' to 'size_t' (aka 'unsigned long long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  344 |       actualPoints = (FREE_PSRAM * 0.8) / (sizeof(KDNode) + sizeof(ColorPoint));
      |                      ^
src\lightweight_kdtree.h:344:23: warning: narrowing conversion from 'size_t' (aka 'unsigned long long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  344 |       actualPoints = (FREE_PSRAM * 0.8) / (sizeof(KDNode) + sizeof(ColorPoint));
      |                       ^
src\lightweight_kdtree.h:380:7: warning: empty catch statements hide issues; to handle exceptions appropriately, consider re-throwing, handling, or avoiding catch altogether [bugprone-empty-catch]
  380 |     } catch (const std::exception& e) {
      |       ^
src\lightweight_kdtree.h:390:34: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  390 |   ColorPoint findNearest(uint8_t r, uint8_t g, uint8_t b) const {
      |                                  ^
src\lightweight_kdtree.h:390:45: warning: parameter name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  390 |   ColorPoint findNearest(uint8_t r, uint8_t g, uint8_t b) const {
      |                                             ^
src\lightweight_kdtree.h:390:56: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  390 |   ColorPoint findNearest(uint8_t r, uint8_t g, uint8_t b) const {
      |                                                        ^
clang-tidy applied 125 of 125 suggested fixes.
Suppressed 35492 warnings (35492 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
