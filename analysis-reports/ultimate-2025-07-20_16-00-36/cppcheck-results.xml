<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.16.0"/>
    <errors>
Checking src\main.cpp ...
Checking src\main.cpp: PROGMEM=;ARDUINO=10819;ESP32=1...
        <error id="normalCheckLevelMaxBranches" severity="information" msg="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." verbose="Limiting analysis of branches. Use --check-level=exhaustive to analyze all branches." file0="src/main.cpp">
            <location file="src\main.cpp" line="0" column="0"/>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LightweightKDTree::getCoordinate&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LightweightKDTree::getCoordinate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="113" column="11"/>
            <symbol>LightweightKDTree::getCoordinate</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;LightweightKDTree::distanceSquared&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;LightweightKDTree::distanceSquared&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="127" column="12"/>
            <symbol>LightweightKDTree::distanceSquared</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PSRAMAllocator &lt; KDNode &gt;::allocate&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PSRAMAllocator &lt; KDNode &gt;::allocate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="42" column="11"/>
            <symbol>PSRAMAllocator &lt; KDNode &gt;::allocate</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PSRAMAllocator &lt; KDNode &gt;::deallocate&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PSRAMAllocator &lt; KDNode &gt;::deallocate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="54" column="8"/>
            <symbol>PSRAMAllocator &lt; KDNode &gt;::deallocate</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PSRAMAllocator &lt; ColorPoint &gt;::allocate&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PSRAMAllocator &lt; ColorPoint &gt;::allocate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="42" column="11"/>
            <symbol>PSRAMAllocator &lt; ColorPoint &gt;::allocate</symbol>
        </error>
        <error id="functionStatic" severity="performance" msg="Technically the member function &apos;PSRAMAllocator &lt; ColorPoint &gt;::deallocate&apos; can be static (but you may consider moving to unnamed namespace)." verbose="The member function &apos;PSRAMAllocator &lt; ColorPoint &gt;::deallocate&apos; can be made a static function. Making a function static can bring a performance benefit since no &apos;this&apos; instance is passed to the function. This change should not cause compiler errors but it does not necessarily make sense conceptually. Think about your design and the task of the function first - is it a function that must not access members of class instances? And maybe it is more appropriate to move this function to an unnamed namespace." cwe="398" inconclusive="true" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="54" column="8"/>
            <symbol>PSRAMAllocator &lt; ColorPoint &gt;::deallocate</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PSRAMAllocator &lt; KDNode &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PSRAMAllocator &lt; KDNode &gt;&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="39" column="3"/>
            <symbol>PSRAMAllocator &lt; KDNode &gt;</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;PSRAMAllocator &lt; ColorPoint &gt;&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;PSRAMAllocator &lt; ColorPoint &gt;&apos; has a constructor with 1 argument that is not explicit. Such, so called &quot;Converting constructors&quot;, should in general be explicit for type safety reasons as that prevents unintended implicit conversions." cwe="398" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="39" column="3"/>
            <symbol>PSRAMAllocator &lt; ColorPoint &gt;</symbol>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/main.cpp">
            <location file="src\dulux_simple_reader.h" line="121" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/main.cpp">
            <location file="src\dulux_simple_reader.h" line="122" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/main.cpp">
            <location file="src\dulux_simple_reader.h" line="178" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/main.cpp">
            <location file="src\dulux_simple_reader.h" line="184" column="24"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected." cwe="398" file0="src/main.cpp">
            <location file="src\main.cpp" line="368" column="27"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;searchMethod&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;searchMethod&apos; is reassigned a value before the old one has been used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="733" column="16" info="searchMethod is overwritten"/>
            <location file="src\main.cpp" line="655" column="18" info="searchMethod is assigned"/>
            <symbol>searchMethod</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;bestIndex&apos; can be reduced." verbose="The scope of the variable &apos;bestIndex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="src/main.cpp">
            <location file="src\main.cpp" line="699" column="9"/>
            <symbol>bestIndex</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;matrix&apos; can be declared as pointer to const" verbose="Variable &apos;matrix&apos; can be declared as pointer to const" cwe="398" file0="src/main.cpp">
            <location file="src\main.cpp" line="1220" column="10" info="Variable &apos;matrix&apos; can be declared as pointer to const"/>
            <symbol>matrix</symbol>
        </error>
        <error id="constVariablePointer" severity="style" msg="Variable &apos;offset&apos; can be declared as pointer to const" verbose="Variable &apos;offset&apos; can be declared as pointer to const" cwe="398" file0="src/main.cpp">
            <location file="src\main.cpp" line="1221" column="10" info="Variable &apos;offset&apos; can be declared as pointer to const"/>
            <symbol>offset</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FastColorData::r_precise&apos; is never used." verbose="struct member &apos;FastColorData::r_precise&apos; is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="853" column="9"/>
            <symbol>FastColorData::r_precise</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FastColorData::g_precise&apos; is never used." verbose="struct member &apos;FastColorData::g_precise&apos; is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="853" column="20"/>
            <symbol>FastColorData::g_precise</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;FastColorData::b_precise&apos; is never used." verbose="struct member &apos;FastColorData::b_precise&apos; is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="853" column="31"/>
            <symbol>FastColorData::b_precise</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;free_heap&apos; is assigned a value that is never used." verbose="Variable &apos;free_heap&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\lightweight_kdtree.h" line="292" column="22"/>
            <symbol>free_heap</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bestIndex&apos; is assigned a value that is never used." verbose="Variable &apos;bestIndex&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="699" column="19"/>
            <symbol>bestIndex</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;bestIndex&apos; is assigned a value that is never used." verbose="Variable &apos;bestIndex&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="709" column="19"/>
            <symbol>bestIndex</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;updated&apos; is assigned a value that is never used." verbose="Variable &apos;updated&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="2151" column="16"/>
            <symbol>updated</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;updated&apos; is assigned a value that is never used." verbose="Variable &apos;updated&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="2158" column="13"/>
            <symbol>updated</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;updated&apos; is assigned a value that is never used." verbose="Variable &apos;updated&apos; is assigned a value that is never used." cwe="563" file0="src/main.cpp">
            <location file="src\main.cpp" line="2165" column="13"/>
            <symbol>updated</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getLRV&apos; is never used." verbose="The function &apos;getLRV&apos; is never used." cwe="561">
            <location file="src\dulux_simple_reader.h" line="36" column="0"/>
            <symbol>getLRV</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;allocate&apos; is never used." verbose="The function &apos;allocate&apos; is never used." cwe="561">
            <location file="src\lightweight_kdtree.h" line="42" column="0"/>
            <symbol>allocate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;deallocate&apos; is never used." verbose="The function &apos;deallocate&apos; is never used." cwe="561">
            <location file="src\lightweight_kdtree.h" line="54" column="0"/>
            <symbol>deallocate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setLevel&apos; is never used." verbose="The function &apos;setLevel&apos; is never used." cwe="561">
            <location file="src\main.cpp" line="91" column="0"/>
            <symbol>setLevel</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cleanupColorDatabase&apos; is never used." verbose="The function &apos;cleanupColorDatabase&apos; is never used." cwe="561">
            <location file="src\main.cpp" line="832" column="0"/>
            <symbol>cleanupColorDatabase</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setup&apos; is never used." verbose="The function &apos;setup&apos; is never used." cwe="561">
            <location file="src\main.cpp" line="1443" column="0"/>
            <symbol>setup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;loop&apos; is never used." verbose="The function &apos;loop&apos; is never used." cwe="561">
            <location file="src\main.cpp" line="1946" column="0"/>
            <symbol>loop</symbol>
        </error>
        <error id="checkersReport" severity="information" msg="Active checkers: 179/836 (use --checkers-report=&lt;filename&gt; to see details)" verbose="Active checkers: 179/836 (use --checkers-report=&lt;filename&gt; to see details)"/>
    </errors>
</results>
