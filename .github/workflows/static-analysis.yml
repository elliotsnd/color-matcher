name: Static Code Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  cppcheck:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
    
    - name: Create analysis directory
      run: mkdir -p analysis-reports
    
    - name: Run Cppcheck Analysis
      run: |
        echo "üîç Running Cppcheck Static Analysis..."
        cppcheck --version
        
        # Run comprehensive analysis
        cppcheck \
          --enable=warning,performance,portability,style \
          --inconclusive \
          --std=c++17 \
          --platform=unix32 \
          --template=gcc \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --force \
          -DPROGMEM="" \
          -DARDUINO=10819 \
          -DARDUINO_ESP32_DEV=1 \
          -DESP32=1 \
          -DESP_PLATFORM=1 \
          -DF_CPU=240000000L \
          --xml \
          --xml-version=2 \
          src/main.cpp \
          2> analysis-reports/cppcheck-results.xml || true
    
    - name: Parse Cppcheck Results
      run: |
        echo "üìä Parsing Cppcheck Results..."
        
        if [ -f analysis-reports/cppcheck-results.xml ]; then
          # Count issues
          errors=$(grep -c 'severity="error"' analysis-reports/cppcheck-results.xml || echo "0")
          warnings=$(grep -c 'severity="warning"' analysis-reports/cppcheck-results.xml || echo "0")
          style=$(grep -c 'severity="style"' analysis-reports/cppcheck-results.xml || echo "0")
          performance=$(grep -c 'severity="performance"' analysis-reports/cppcheck-results.xml || echo "0")
          portability=$(grep -c 'severity="portability"' analysis-reports/cppcheck-results.xml || echo "0")
          
          echo "## Cppcheck Analysis Results üìä" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Issue Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üö® Errors | $errors |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö†Ô∏è Warnings | $warnings |" >> $GITHUB_STEP_SUMMARY
          echo "| üé® Style Issues | $style |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ö° Performance Issues | $performance |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ Portability Issues | $portability |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          total=$((errors + warnings + style + performance + portability))
          echo "**Total Issues Found: $total**" >> $GITHUB_STEP_SUMMARY
          
          # Set status based on results
          if [ $errors -gt 0 ]; then
            echo "‚ùå Analysis found $errors error(s) - please review and fix"
            echo "error_count=$errors" >> $GITHUB_OUTPUT
            exit 1
          elif [ $warnings -gt 5 ]; then
            echo "‚ö†Ô∏è Analysis found $warnings warning(s) - consider reviewing"
          elif [ $total -eq 0 ]; then
            echo "‚úÖ No issues found! Great job!"
          else
            echo "üëç Analysis found only minor issues ($total total)"
          fi
          
          # Show sample issues
          if [ $total -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Sample Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            # Extract first few issues for display
            grep -E 'severity="(error|warning)"' analysis-reports/cppcheck-results.xml | head -5 >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "‚ùå No analysis results file found"
          exit 1
        fi
    
    - name: Upload Cppcheck Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cppcheck-analysis-results
        path: analysis-reports/
        retention-days: 30
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('analysis-reports/cppcheck-results.xml')) {
            const xmlContent = fs.readFileSync('analysis-reports/cppcheck-results.xml', 'utf8');
            
            // Count issues
            const errors = (xmlContent.match(/severity="error"/g) || []).length;
            const warnings = (xmlContent.match(/severity="warning"/g) || []).length;
            const style = (xmlContent.match(/severity="style"/g) || []).length;
            const performance = (xmlContent.match(/severity="performance"/g) || []).length;
            const total = errors + warnings + style + performance;
            
            let comment = `## üîç Cppcheck Static Analysis Results\n\n`;
            comment += `| Issue Type | Count |\n`;
            comment += `|------------|-------|\n`;
            comment += `| üö® Errors | ${errors} |\n`;
            comment += `| ‚ö†Ô∏è Warnings | ${warnings} |\n`;
            comment += `| üé® Style Issues | ${style} |\n`;
            comment += `| ‚ö° Performance Issues | ${performance} |\n`;
            comment += `\n**Total Issues: ${total}**\n\n`;
            
            if (total === 0) {
              comment += `‚úÖ **Excellent!** No issues found in the static analysis.\n`;
            } else if (errors > 0) {
              comment += `‚ùå **Action Required:** Found ${errors} error(s) that should be fixed.\n`;
            } else if (warnings > 5) {
              comment += `‚ö†Ô∏è **Review Recommended:** Found ${warnings} warning(s) to consider.\n`;
            } else {
              comment += `üëç **Good Job!** Only minor issues found.\n`;
            }
            
            comment += `\nüìÑ Full analysis results are available in the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).\n`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

  build-check:
    runs-on: ubuntu-latest
    needs: cppcheck
    if: success()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PlatformIO
      run: |
        pip install platformio
        platformio --version
    
    - name: Check if project compiles
      run: |
        if [ -f platformio.ini ]; then
          echo "üì¶ Building project to verify compilation..."
          platformio run --environment esp32dev --target compiledb
          echo "‚úÖ Project compiles successfully!"
        else
          echo "‚ÑπÔ∏è No platformio.ini found - skipping compile check"
        fi
