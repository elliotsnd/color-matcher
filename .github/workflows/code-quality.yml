name: Code Quality Analysis

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'lib/**'
      - 'include/**'
      - '*.cpp'
      - '*.h'
      - 'platformio.ini'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'lib/**'
      - 'include/**'
      - '*.cpp'
      - '*.h'
      - 'platformio.ini'
  workflow_dispatch:

jobs:
  cppcheck-analysis:
    name: Cppcheck Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Cppcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck

    - name: Setup Python for PlatformIO
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Create PlatformIO project structure
      run: |
        # Create basic directories if they don't exist
        mkdir -p lib include
        
        # Initialize PlatformIO if platformio.ini exists
        if [ -f "platformio.ini" ]; then
          pio check --skip-packages
        fi

    - name: Run Cppcheck Analysis
      run: |
        # Create reports directory
        mkdir -p cppcheck-reports
        
        # Find all C++ source files
        find src lib -name "*.cpp" -o -name "*.c" -o -name "*.cxx" > source_files.txt || echo "src/main.cpp" > source_files.txt
        
        # Run Cppcheck with comprehensive analysis
        cppcheck \
          --enable=all \
          --std=c++11 \
          --platform=unix32 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          --suppress=unmatchedSuppression \
          --force \
          --inline-suppr \
          --xml \
          --xml-version=2 \
          -DARDUINO=10819 \
          -DARDUINO_ESP32_DEV \
          -DESP32 \
          -DESP_PLATFORM \
          -DF_CPU=240000000L \
          -DHAVE_CONFIG_H \
          -I src \
          -I lib \
          -I include \
          --file-list=source_files.txt \
          2> cppcheck-reports/cppcheck-report.xml

    - name: Parse Cppcheck Results
      run: |
        # Count issues by severity
        errors=$(grep -c 'severity="error"' cppcheck-reports/cppcheck-report.xml || echo "0")
        warnings=$(grep -c 'severity="warning"' cppcheck-reports/cppcheck-report.xml || echo "0")
        style=$(grep -c 'severity="style"' cppcheck-reports/cppcheck-report.xml || echo "0")
        performance=$(grep -c 'severity="performance"' cppcheck-reports/cppcheck-report.xml || echo "0")
        portability=$(grep -c 'severity="portability"' cppcheck-reports/cppcheck-report.xml || echo "0")
        information=$(grep -c 'severity="information"' cppcheck-reports/cppcheck-report.xml || echo "0")
        
        total=$((errors + warnings + style + performance + portability + information))
        
        echo "## üìä Cppcheck Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üî¥ Errors | $errors |" >> $GITHUB_STEP_SUMMARY
        echo "| üü° Warnings | $warnings |" >> $GITHUB_STEP_SUMMARY
        echo "| üîµ Style | $style |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö° Performance | $performance |" >> $GITHUB_STEP_SUMMARY
        echo "| üì± Portability | $portability |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ÑπÔ∏è Information | $information |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total** | **$total** |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Set environment variables for next steps
        echo "CPPCHECK_ERRORS=$errors" >> $GITHUB_ENV
        echo "CPPCHECK_WARNINGS=$warnings" >> $GITHUB_ENV
        echo "CPPCHECK_TOTAL=$total" >> $GITHUB_ENV

    - name: Display Detailed Results
      if: env.CPPCHECK_TOTAL != '0'
      run: |
        echo "## üîç Detailed Issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # Parse XML and display human-readable results
        python3 << 'EOF'
        import xml.etree.ElementTree as ET
        import os
        
        try:
            tree = ET.parse('cppcheck-reports/cppcheck-report.xml')
            root = tree.getroot()
            
            for error in root.iter('error'):
                severity = error.get('severity', 'unknown')
                msg = error.get('msg', 'No message')
                
                # Get location info
                location = error.find('location')
                if location is not None:
                    file_path = location.get('file', 'unknown file')
                    line = location.get('line', '?')
                    
                    # Make file path relative to repo root
                    if file_path.startswith('/'):
                        file_path = os.path.relpath(file_path)
                    
                    severity_icon = {
                        'error': 'üî¥',
                        'warning': 'üü°', 
                        'style': 'üîµ',
                        'performance': '‚ö°',
                        'portability': 'üì±',
                        'information': '‚ÑπÔ∏è'
                    }.get(severity, '‚ùì')
                    
                    print(f"{severity_icon} {severity.upper()}: {file_path}:{line}")
                    print(f"   {msg}")
                    print()
        except Exception as e:
            print(f"Error parsing results: {e}")
        EOF
        
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: Create HTML Report
      if: always()
      run: |
        # Generate simple HTML report
        cat > cppcheck-reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Cppcheck Analysis Report</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .error { color: #d32f2f; }
                .warning { color: #f57c00; }
                .style { color: #1976d2; }
                .performance { color: #388e3c; }
                .portability { color: #7b1fa2; }
                .information { color: #0097a7; }
                table { border-collapse: collapse; width: 100%; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #f2f2f2; }
            </style>
        </head>
        <body>
            <h1>üîç Cppcheck Analysis Report</h1>
            <p>Generated on $(date)</p>
        EOF
        
        # Convert XML to HTML table
        python3 << 'EOF'
        import xml.etree.ElementTree as ET
        import html
        
        try:
            tree = ET.parse('cppcheck-reports/cppcheck-report.xml')
            root = tree.getroot()
            
            print('<table>')
            print('<tr><th>Severity</th><th>File</th><th>Line</th><th>Message</th></tr>')
            
            for error in root.iter('error'):
                severity = html.escape(error.get('severity', 'unknown'))
                msg = html.escape(error.get('msg', 'No message'))
                
                location = error.find('location')
                if location is not None:
                    file_path = html.escape(location.get('file', 'unknown'))
                    line = html.escape(location.get('line', '?'))
                    
                    print(f'<tr><td class="{severity}">{severity}</td><td>{file_path}</td><td>{line}</td><td>{msg}</td></tr>')
            
            print('</table>')
        except Exception as e:
            print(f'<p>Error generating report: {e}</p>')
        EOF
        
        echo '</body></html>' >> cppcheck-reports/index.html

    - name: Upload Cppcheck Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cppcheck-reports
        path: cppcheck-reports/
        retention-days: 30

    - name: Comment PR with Results
      if: github.event_name == 'pull_request' && env.CPPCHECK_TOTAL != '0'
      uses: actions/github-script@v7
      with:
        script: |
          const errors = parseInt(process.env.CPPCHECK_ERRORS || '0');
          const warnings = parseInt(process.env.CPPCHECK_WARNINGS || '0');
          const total = parseInt(process.env.CPPCHECK_TOTAL || '0');
          
          const body = `## üìä Cppcheck Analysis Results
          
          Found ${total} potential issues:
          - üî¥ Errors: ${errors}
          - üü° Warnings: ${warnings}
          
          ${total > 0 ? '‚ö†Ô∏è Please review the [detailed report](' + context.payload.pull_request.html_url + '/checks) in the workflow run.' : '‚úÖ No issues found!'}
          
          ---
          *This comment was automatically generated by the Code Quality workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Fail on Critical Issues
      if: env.CPPCHECK_ERRORS != '0'
      run: |
        echo "‚ùå Found $CPPCHECK_ERRORS critical errors that must be fixed!"
        echo "Please review the analysis results and fix the errors before merging."
        exit 1

  platformio-check:
    name: PlatformIO Static Analysis
    runs-on: ubuntu-latest
    needs: cppcheck-analysis
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Run PlatformIO Check
      run: |
        # Only run if platformio.ini exists
        if [ -f "platformio.ini" ]; then
          echo "Running PlatformIO static analysis..."
          pio check --verbose --severity=medium --fail-on-defect=medium 2>&1 | tee pio-check-output.txt || true
          
          # Parse results
          if grep -q "DEFECTS FOUND" pio-check-output.txt; then
            echo "## ‚ö†Ô∏è PlatformIO Check Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -20 pio-check-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ‚úÖ PlatformIO Check - No Issues Found" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## ‚ÑπÔ∏è PlatformIO Check Skipped" >> $GITHUB_STEP_SUMMARY
          echo "No platformio.ini found - skipping PlatformIO static analysis" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload PlatformIO Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: platformio-check-results
        path: pio-check-output.txt
        retention-days: 7
